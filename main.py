import datetime
import discord
from discord import app_commands
import json
import os
from discord.ext import commands
import asyncio
from keep_alive import keep_alive 
import random
from operator import itemgetter
from discord.ui import View, Button
from motor.motor_asyncio import AsyncIOMotorClient
from discord import Interaction, Embed, ui, ButtonStyle
from discord.ext import commands
import math

MONGO_URI = "mongodb+srv://Miami_RP_BOT:MftijuaSKr27YxwB@miamirp.y7b8j.mongodb.net/?retryWrites=true&w=majority&appName=MiamiRP"
mongo_client = AsyncIOMotorClient(MONGO_URI)
db = mongo_client["miamirpbot"]
users_collection = db["hraci"]

TOKEN = os.getenv("DISCORD_BOT_TOKEN")
keep_alive()
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="/", intents=intents)
tree = bot.tree

# === Role rewards and configurations ===
ROLE_ODMENY = {
    1293617189005557873: 3000,      #Obƒçan
    1293617189005557870: 25000,     #≈òeditel: FHP
    1293617189005557868: 25000,     #≈òeditel: MPD
    1293617189005557867: 10000,     #≈òeditel: MFD
    1293617189005557865: 10000,     #≈òeditel: FDOT
    1293617189005557864: 25000,     #≈òeditel: FBI
    1293617189005557866: 10000,     #≈òeditel: EMS
    1293617189005557869: 9500,      #≈òeditel: MGMC
    1346163519070146681: 9500,      #≈òeditel: IRS
    1330524261030301707: 9500,      #≈òeditel: DMV
}

# Available cars and prices
DOSTUPNA_AUTA = [
    "Falcon Stallion 350 1969", "Bullhorn Prancer 1969",
    "Falcon Advance 100 Holiday Edition 1956", "Chevlon Corbeta C2 1967",
    "Sentinel Platinum 1968", "Bullhorn Foreman 1988",
    "Arrow Phoenix Nationals 1977", "Vellfire Runabout 1984",
    "Chevlon L/35 Extended 1981", "Chevlon Inferno 1981", "Chevlon L/15 1981",
    "Falcon Traveller 2003", "Chevlon Camion 2002", "Falcon Prime Eques 2003",
    "Vellfire Evertt 1995", "Overland Apache 1995", "Vellfire Prima 2009",
    "Overland Apache 2011", "Overland Buckaroo 2018", "Falcon Scavenger 2016",
    "Falcon Fission 2015", "Chevlon Captain 2009", "Vellfire Riptide 2020",
    "Bullhorn BH15 2009", "Elysion Slick 2014", "Chevlon Commuter Van 2006",
    "Chevlon Amigo LZR 2016", "Chevlon Landslide 2007",
    "Falcon Traveller 2022", "Navara Boundary 2022",
    "Bullhorn Determinator 2008", "Chevlon Camion 2021", "Chevlon Camion 2008",
    "Chevlon Revver 2005", "Falcon Rampage Bigfoot 2-Door 2021",
    "Bullhorn Prancer 2011", "Navara Imperium 2020", "Falcon Advance 2018",
    "Falcon Advance Beast 2017", "Falcon Rampage Beast 2021",
    "Falcon Advance 2022", "Bullhorn Prancer Widebody 2020",
    "Bullhorn Determinator SFP Fury 2022", "Vellfire Prairie 2022",
    "Bullhorn Pueblo 2018", "Navara Horizon 2013", "Chevlon Antilope 1994",
    "Leland LTS 2010", "Overland Apache SFP 2020", "Stuttgart Landschaft 2022",
    "Vellfire Pioneer 2019", "Falcon Stalion 350", "Chevlon Amigo S 2011",
    "Chevlon Amigo S 2016", "Amigo LZR 2011", "Averon S5 2010",
    "Leland Vault 2020", "Averon RS3 2020", "Stuttgart Executive 2021",
    "Terrain Traveller 2022", "Averon Q8 2022", "BKM Munich 2020",
    "Stuttgart Vierturig 2021", "Takeo Experience 2021", "Averon R8 2017",
    "Strugatti Ettore 2020", "Surrey 650S 2016", "LTS5-V Blackwing 2023",
    "Falcon Heritage 2021", "Ferdinand Jalapeno Turbo 2022",
    "Falcon Traveller 2022", "Chevlon Corbeta TZ 2014",
    "Chevlon Corbeta 8 2023", "Falcon Advance Bolt 2024", "Averon Anodic 2024",
    "Celestial Truckatron 2024", "BKM Risen Roadster 2020"
]

CENY_AUT = {
    # Classic
    "Falcon Stallion 350 1969": 260000,
    "Bullhorn Prancer 1969": 245000,
    "Falcon Advance 100 Holiday Edition 1956": 95000,
    "Chevlon Corbeta C2 1967": 185000,
    "Sentinel Platinum 1968": 115000,
    "Bullhorn Foreman 1988": 105000,
    "Arrow Phoenix Nationals 1977": 240000,
    "Vellfire Runabout 1984": 95000,
    "Chevlon L/35 Extended 1981": 105000,
    "Chevlon Inferno 1981": 97500,
    "Chevlon L/15 1981": 92000,

    # Regular
    "Falcon Traveller 2003": 15000,
    "Chevlon Camion 2002": 10000,
    "Falcon Prime Eques 2003": 9000,
    "Vellfire Evertt 1995": 20000,
    "Overland Apache 1995": 12000,
    "Vellfire Prima 2009": 10000,
    "Overland Apache 2011": 40000,
    "Overland Buckaroo 2018": 45000,
    "Falcon Scavenger 2016": 40000,
    "Falcon Fission 2015": 35000,
    "Chevlon Captain 2009": 20000,
    "Vellfire Riptide 2020": 55000,
    "Bullhorn BH15 2009": 30000,
    "Elysion Slick 2014": 20000,
    "Chevlon Commuter Van 2006": 30000,
    "Chevlon Amigo LZR 2016": 100000,
    "Chevlon Landslide 2007": 26000,
    "Falcon Traveller 2022": 90000,
    "Navara Boundary 2022": 65000,
    "Bullhorn Determinator 2008": 70000,
    "Chevlon Camion 2021": 75000,
    "Chevlon Camion 2008": 30000,
    "Chevlon Revver 2005": 50000,
    "Falcon Rampage Bigfoot 2-Door 2021": 70000,
    "Bullhorn Prancer 2011": 50000,
    "Navara Imperium 2020": 30000,
    "Falcon Advance 2018": 70000,
    "Falcon Advance Beast 2017": 100000,
    "Falcon Rampage Beast 2021": 130000,
    "Falcon Advance 2022": 140000,
    "Bullhorn Prancer Widebody 2020": 170000,
    "Bullhorn Determinator SFP Fury 2022": 185000,
    "Vellfire Prairie 2022": 80000,
    "Bullhorn Pueblo 2018": 100000,
    "Navara Horizon 2013": 250000,
    "Chevlon Antilope 1994": 7000,
    "Leland LTS 2010": 42000,
    "Overland Apache SFP 2020": 150000,
    "Stuttgart Landschaft 2022": 200000,
    "Vellfire Pioneer 2019": 125000,
    "Falcon Stalion 350": 100000,
    "Chevlon Amigo S 2011": 85000,
    "Chevlon Amigo S 2016": 96000,
    "Chevlon Amigo LZR 2011": 90000,

    # Prestige
    "Averon S5 2010": 140000,
    "Leland Vault 2020": 130000,
    "Averon RS3 2020": 180000,
    "Stuttgart Executive: 2021": 240000,
    "Terrain Traveller 2022": 180000,
    "Averon Q8 2022": 220000,
    "BKM Munich 2020": 185000,
    "Stuttgart Vierturig: 2021": 250000,
    "Takeo Experience 2021": 550000,
    "Averon R8 2017": 800000,
    "Strugatti Ettore 2020": 1200000,
    "Surrey 650S 2016": 900000,
    "Leland LTS5-V Blackwing 2023": 280000,
    "Falcon Heritage 2021": 720000,
    "Ferdinand Jalapeno Turbo: 2022": 200000,
    "Falcon Traveller 2022": 100000,
    "Chevlon Corbeta TZ 2014": 450000,
    "Chevlon Corbeta 8 2023": 600000,

    # Electric
    "Falcon Advance Bolt 2024": 350000,
    "Averon Anodic 2024": 500000,
    "Celestial Truckatron 2024": 800000,
    "BKM Risen Roadster 2020": 650000
}

CENY_ZBRANI = {
    # Zbranƒõ typu A:
    "Beretta M9": 700, 
    "Desert Eagle": 900, 
    "Colt M1911": 750, 
    "Colt Python": 1000,
    "Lemat Revolver": 1200,

    # Zbranƒõ typu B:
    "TEC-9": 1000,
    "Skorpion": 1100,
    "Kriss Vector": 1500, 

    #Zbranƒõ typu C:
    "M14": 2000,
    "AK47": 2500, 
    "PPSH 41": 2300, 
    "LMT L129A1": 2600, 
    "Remington 870": 2000, 

    #Zbranƒõ typu D:
    "Remington MSR": 15000, 
    "M249":  12000 
}

DOSTUPNE_ZBRANE = [
    "Beretta M9", "M249", "Remington MSR", "M14", "AK47", "PPSH 41",
    "Desert Eagle", "Colt M1911", "Kriss Vector", "LMT L129A1", "Skorpion",
    "Colt Python", "TEC-9", "Remington 870", "Lemat Revolver"
]

DOSTUPNE_VECI = ["Chemik√°lie", "Su≈°iƒçka", "UV Lampa", "Chemick√© n√°dob√≠", "Edrin", "MDMA", "Cukr", "Formiƒçka", "M√°k"]

CENY_VECI = {
    # üî¨ Suroviny
    "Chemik√°lie": 200,
    "Edrin": 300,
    "Mdma pr√°≈°ek": 200,
    "Barvivo": 50,
    "Plnidlo": 40,
    "Pseudoefedrin": 180,
    "ƒåistiƒç": 90,
    "Cukr": 50,
    "M√°kov√° pasta": 150,
    "Semena marihuany": 250,
    "Voda": 10,
    "Hnojivo": 30,
    "Ocet": 15,
    "Listy koky": 350,

    # üõ†Ô∏è N√°stroje
    "Su≈°iƒçka": 1500,
    "Formiƒçka": 1000,
    "UV lampa": 1000,
    "Kvƒõtin√°ƒç": 150,
    "Destilaƒçn√≠ sada": 2500,
    "Extraktor": 2000,
    "Ochrann√° maska": 800,
    "Ochrann√© rukavice": 100,
    "Tabletovac√≠ lis": 3000,
    "Varn√° sada": 1800
}

DROGY = ["Marihuana", "Kokain", "Metamfetamin", "Pervitin", "Ext√°ze", "Heroin"]
VYROBA_COOLDOWN = 2  # minutes

RECEPTY = {
    "Marihuana": {
        "suroviny": {
            "Semena marihuany": 1,
            "Voda": 2,
            "Hnojivo": 1
        },
        "nastroje": {
            "Kvƒõtin√°ƒç": 1,
            "UV Lampa": 1,
            "Su≈°iƒçka": 1
        },
        "cas": 45,  # minut za 10g
        "selhani": 0
    },
    "Kokain": {
        "suroviny": {
            "Listy koky": 3,
            "Chemik√°lie": 2
        },
        "nastroje": {
            "Extraktor": 1,
            "Ochrann√© rukavice": 1
        },
        "cas": 60,
        "selhani": 0.10
    },
    "Metamfetamin": {
        "suroviny": {
            "Chemik√°lie": 3,
            "Pseudoefedrin": 2
        },
        "nastroje": {
            "Destilaƒçn√≠ sada": 1,
            "Ochrann√© rukavice": 1
        },
        "cas": 70,
        "selhani": 0.12
    },
    "Pervitin": {
        "suroviny": {
            "Pseudoefedrin": 3,
            "ƒåistiƒç": 1
        },
        "nastroje": {
            "Destilaƒçn√≠ sada": 1,
            "Ochrann√© rukavice": 1
        },
        "cas": 55,
        "selhani": 0.09
    },
    "Ext√°ze": {
        "suroviny": {
            "MDMA pr√°≈°ek": 2,
            "Barvivo": 1,
            "Plnidlo": 1
        },
        "nastroje": {
            "Formiƒçka": 1,
            "Ochrann√© rukavice": 1
        },
        "cas": 50,
        "selhani": 0.07
    },
    "Heroin": {
        "suroviny": {
            "M√°k": 2,
            "Ocet": 1,
            "Chemik√°lie": 1
        },
        "nastroje": {
            "Destilaƒçn√≠ sada": 1,
            "Ochrann√° maska": 1
        },
        "cas": 65,
        "selhani": 0.11
    }
}

# Constants
ADMIN_ROLE_ID = 1356305712531243048  # Zmƒõ≈à na ID admin role
POLICE_ROLE_ID = 1293617188997038114  # Zmƒõ≈à na ID role policie
SHERIF_ROLE_ID = 1338975564157026374
LOG_CHANNEL_ID = 1293617189055758433
VECI_SEZNAM = list(CENY_VECI.keys())
DROGY_SEZNAM = ["Marihuana", "Kokain", "Metamfetamin", "Pervitin", "Ext√°ze", "Heroin"]

# === Database functions ===
async def get_or_create_user(user_id: int):
    user = await users_collection.find_one({"_id": str(user_id)})
    if not user:
        user = {
            "_id": str(user_id),
            "penize": 0,
            "hotovost": 0,
            "bank": 0,
            "auta": {},
            "zbrane": {},
            "veci": {},
            "drogy": {},
            "last_collect": None,
            "last_vyroba": None,
            "collect_timestamps": {}
        }
        await users_collection.insert_one(user)
    return user

async def save_user(user_id: int, data: dict):
    await users_collection.replace_one({"_id": str(user_id)}, data)

async def update_user_field(user_id: int, field: str, value):
    await users_collection.update_one(
        {"_id": str(user_id)},
        {"$set": {field: value}}
    )

async def update_user_money(user_id: int, hotovost: int, bank: int):
    penize = hotovost + bank
    await users_collection.update_one(
        {"_id": str(user_id)},
        {"$set": {"hotovost": hotovost, "bank": bank, "penize": penize}}
    )

async def add_user_item(user_id: int, item_type: str, item_name: str, amount: int):
    await users_collection.update_one(
        {"_id": str(user_id)},
        {"$inc": {f"{item_type}.{item_name}": amount}}
    )

async def remove_user_item(user_id: int, item_type: str, item_name: str, amount: int):
    user = await get_or_create_user(user_id)
    current_amount = user.get(item_type, {}).get(item_name, 0)
    
    if current_amount <= amount:
        await users_collection.update_one(
            {"_id": str(user_id)},
            {"$unset": {f"{item_type}.{item_name}": ""}}
        )
    else:
        await users_collection.update_one(
            {"_id": str(user_id)},
            {"$inc": {f"{item_type}.{item_name}": -amount}}
        )

def get_total_money(data):
    return data.get("hotovost", 0) + data.get("bank", 0)

def is_admin(user: discord.User):
    return any(role.id == ADMIN_ROLE_ID for role in user.roles)

def has_permission(user: discord.User):
    return any(role.id in (ADMIN_ROLE_ID, POLICE_ROLE_ID) for role in user.roles)

async def log_action(bot, guild: discord.Guild, message: str):
    log_channel = guild.get_channel(LOG_CHANNEL_ID)
    if log_channel:
        await log_channel.send(f"üìò **Log:** {message}")

# === Autocomplete functions ===
async def autocomplete_veci(interaction: discord.Interaction, current: str):
    return [
        app_commands.Choice(name=vec, value=vec)
        for vec in VECI_SEZNAM if current.lower() in vec.lower()
    ][:25]

async def autocomplete_drogy(interaction: discord.Interaction, current: str):
    return [
        app_commands.Choice(name=drug, value=drug)
        for drug in DROGY_SEZNAM if current.lower() in drug.lower()
    ][:25]

async def autocomplete_veci_drogy(interaction: discord.Interaction, current: str):
    user_data = await get_or_create_user(interaction.user.id)
    veci = user_data.get("veci", {})
    drogy = user_data.get("drogy", {})
    
    dostupne_polozky = list(veci.keys()) + list(drogy.keys())
    
    return [
        app_commands.Choice(name=item, value=item)
        for item in dostupne_polozky if current.lower() in item.lower()
    ][:25]

async def autocomplete_drogy_ve_inventari(interaction: discord.Interaction, current: str):
    data = await get_or_create_user(interaction.user.id)
    drogy = data.get("drogy", {})
    options = [
        app_commands.Choice(name=droga, value=droga)
        for droga in drogy.keys()
        if current.lower() in droga.lower()
    ][:25]
    return options

async def autocomplete_odeber_veci(interaction: discord.Interaction, current: str):
    uzivatel = None
    for option in interaction.data.get("options", []):
        if option["name"] == "uzivatel":
            try:
                uzivatel = await interaction.guild.fetch_member(option["value"])
            except:
                pass
            break
    if not uzivatel:
        return []

    data = await get_or_create_user(uzivatel.id)
    veci = data.get("veci", {})
    return [
        app_commands.Choice(name=vec, value=vec)
        for vec in veci.keys() if current.lower() in vec.lower()
    ][:25]

async def autocomplete_odeber_drogy(interaction: discord.Interaction, current: str):
    uzivatel = None
    for option in interaction.data.get("options", []):
        if option["name"] == "uzivatel":
            try:
                uzivatel = await interaction.guild.fetch_member(option["value"])
            except:
                pass
            break
    if not uzivatel:
        return []

    data = await get_or_create_user(uzivatel.id)
    drogy = data.get("drogy", {})
    return [
        app_commands.Choice(name=droga, value=droga)
        for droga in drogy.keys() if current.lower() in droga.lower()
    ][:25]

# === UI Classes ===
class ConfirmationView(discord.ui.View):
    def __init__(self, prodavajici, kupec, item, item_type, cena):
        super().__init__(timeout=60.0)
        self.prodavajici = prodavajici
        self.kupec = kupec
        self.item = item
        self.item_type = item_type
        self.cena = cena
        self.result = None

    @discord.ui.button(label='‚úÖ Potvrdit n√°kup', style=discord.ButtonStyle.green)
    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.kupec.id:
            await interaction.response.send_message("‚ùå Pouze kupuj√≠c√≠ m≈Ø≈æe potvrdit n√°kup.", ephemeral=True)
            return

        self.result = True
        self.stop()
        await interaction.response.edit_message(content=f"‚úÖ {self.kupec.display_name} potvrdil n√°kup!", view=None)

    @discord.ui.button(label='‚ùå Zru≈°it', style=discord.ButtonStyle.red)
    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id not in [self.kupec.id, self.prodavajici.id]:
            await interaction.response.send_message("‚ùå Pouze kupuj√≠c√≠ nebo prod√°vaj√≠c√≠ m≈Ø≈æe zru≈°it obchod.", ephemeral=True)
            return

        self.result = False
        self.stop()
        await interaction.response.edit_message(content=f"‚ùå Obchod byl zru≈°en.", view=None)

    async def on_timeout(self):
        self.result = False

# === Bot Events ===
@bot.event
async def on_ready():
    await tree.sync()
    print(f"‚úÖ Bot je online jako {bot.user}")

# === Admin Commands ===
@tree.command(name="pridej-zbran", description="P≈ôid√° zbra≈à hr√°ƒçi (admin)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu p≈ôid√°≈° zbra≈à",
                       zbran="Zbra≈à, kterou chce≈° p≈ôidat",
                       pocet="Poƒçet kus≈Ø")
async def pridej_zbran(interaction: discord.Interaction,
                       uzivatel: discord.Member,
                       zbran: str,
                       pocet: int = 1):
    if not is_admin(interaction.user):
        await interaction.response.send_message(
            "‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return
    if zbran not in DOSTUPNE_ZBRANE:
        await interaction.response.send_message(
            f"‚ùå Zbra≈à `{zbran}` nen√≠ v seznamu dostupn√Ωch zbran√≠.",
            ephemeral=True)
        return
    
    await add_user_item(uzivatel.id, "zbrane", zbran, pocet)
    await interaction.response.send_message(
        f"‚úÖ P≈ôid√°no {pocet}x `{zbran}` hr√°ƒçi {uzivatel.display_name}.")

@pridej_zbran.autocomplete("zbran")
async def autocomplete_zbran_pridat(interaction: discord.Interaction, current: str):
    return [
        app_commands.Choice(name=z, value=z) for z in DOSTUPNE_ZBRANE
        if current.lower() in z.lower()
    ][:25]

@tree.command(name="odeber-zbran", description="Odebere zbra≈à hr√°ƒçi (admin)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu odebere≈° zbra≈à",
                       zbran="Zbra≈à, kterou chce≈° odebrat",
                       pocet="Poƒçet kus≈Ø")
async def odeber_zbran(interaction: discord.Interaction,
                       uzivatel: discord.Member,
                       zbran: str,
                       pocet: int = 1):
    if not is_admin(interaction.user):
        await interaction.response.send_message(
            "‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return
    
    data = await get_or_create_user(uzivatel.id)
    if zbran in data["zbrane"] and data["zbrane"][zbran] >= pocet:
        await remove_user_item(uzivatel.id, "zbrane", zbran, pocet)
        await interaction.response.send_message(
            f"‚úÖ Odebr√°no {pocet}x `{zbran}` hr√°ƒçi {uzivatel.display_name}."
        )
    else:
        await interaction.response.send_message(
            f"‚ùå Zbra≈à `{zbran}` nebyla nalezena u {uzivatel.display_name}."
        )

@odeber_zbran.autocomplete("zbran")
async def autocomplete_zbran_odebrat(interaction: discord.Interaction, current: str):
    uzivatel = interaction.namespace.uzivatel
    if not uzivatel:
        return []
    data = await get_or_create_user(uzivatel.id)
    return [
        app_commands.Choice(name=z, value=z) for z in data["zbrane"]
        if current.lower() in z.lower()
    ][:25]

@tree.command(name="pridej-auto", description="P≈ôid√° auto hr√°ƒçi (admin)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu p≈ôid√°≈° auto",
                       auto="Auto, kter√© chce≈° p≈ôidat",
                       pocet="Poƒçet kus≈Ø")
async def pridej_auto(interaction: discord.Interaction,
                      uzivatel: discord.Member,
                      auto: str,
                      pocet: int = 1):
    if not is_admin(interaction.user):
        await interaction.response.send_message(
            "‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return
    if auto not in DOSTUPNA_AUTA:
        await interaction.response.send_message(
            f"‚ùå Auto `{auto}` nen√≠ v seznamu dostupn√Ωch aut.", ephemeral=True)
        return
    
    await add_user_item(uzivatel.id, "auta", auto, pocet)
    await interaction.response.send_message(
        f"‚úÖ P≈ôid√°no {pocet}x `{auto}` hr√°ƒçi {uzivatel.display_name}.")

@pridej_auto.autocomplete("auto")
async def autocomplete_auto_pridat(interaction: discord.Interaction, current: str):
    return [
        app_commands.Choice(name=a, value=a) for a in DOSTUPNA_AUTA
        if current.lower() in a.lower()
    ][:25]

@tree.command(name="odeber-auto", description="Odebere auto hr√°ƒçi (admin)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu odebere≈° auto",
                       auto="Auto, kter√© chce≈° odebrat",
                       pocet="Poƒçet kus≈Ø")
async def odeber_auto(interaction: discord.Interaction,
                      uzivatel: discord.Member,
                      auto: str,
                      pocet: int = 1):
    if not is_admin(interaction.user):
        await interaction.response.send_message(
            "‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return
    
    data = await get_or_create_user(uzivatel.id)
    if auto in data["auta"] and data["auta"][auto] >= pocet:
        await remove_user_item(uzivatel.id, "auta", auto, pocet)
        await interaction.response.send_message(
            f"‚úÖ Odebr√°no {pocet}x `{auto}` hr√°ƒçi {uzivatel.display_name}.")
    else:
        await interaction.response.send_message(
            f"‚ùå Auto `{auto}` nebylo nalezeno u {uzivatel.display_name}.")

@odeber_auto.autocomplete("auto")
async def autocomplete_auto_odebrat(interaction: discord.Interaction, current: str):
    uzivatel = interaction.namespace.uzivatel
    if not uzivatel:
        return []
    data = await get_or_create_user(uzivatel.id)
    return [
        app_commands.Choice(name=a, value=a) for a in data["auta"]
        if current.lower() in a.lower()
    ][:25]

@tree.command(name="pridej-penize", description="P≈ôid√° pen√≠ze hr√°ƒçi (admin)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu chce≈° p≈ôidat pen√≠ze", castka="Kolik penƒõz chce≈° p≈ôidat")
async def pridej_penize(interaction: discord.Interaction, uzivatel: discord.Member, castka: int):
    if not is_admin(interaction.user):
        await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return
    
    data = await get_or_create_user(uzivatel.id)
    new_hotovost = data["hotovost"] + castka
    await update_user_money(uzivatel.id, new_hotovost, data["bank"])
    await interaction.response.send_message(f"‚úÖ P≈ôid√°no {castka}$ hr√°ƒçi {uzivatel.display_name}.")

@tree.command(name="odeber-penize", description="Odebere pen√≠ze hr√°ƒçi (admin)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu chce≈° odebrat pen√≠ze", castka="Kolik penƒõz chce≈° odebrat (nebo 'all' pro v≈°echny)")
async def odeber_penize(interaction: discord.Interaction, uzivatel: discord.Member, castka: str):
    if not is_admin(interaction.user):
        await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return
    
    data = await get_or_create_user(uzivatel.id)

    if castka.lower() == "all":
        await update_user_money(uzivatel.id, 0, 0)
        actual_castka = data["hotovost"] + data["bank"]
    else:
        try:
            actual_castka = int(castka)
            if actual_castka <= 0:
                await interaction.response.send_message("‚ùå ƒå√°stka mus√≠ b√Ωt vƒõt≈°√≠ ne≈æ 0.", ephemeral=True)
                return
        except ValueError:
            await interaction.response.send_message("‚ùå Neplatn√° ƒç√°stka. Pou≈æij ƒç√≠slo nebo 'all'.", ephemeral=True)
            return

        new_hotovost = data["hotovost"]
        new_bank = data["bank"]
        
        if new_hotovost >= actual_castka:
            new_hotovost -= actual_castka
        else:
            remaining = actual_castka - new_hotovost
            new_hotovost = 0
            new_bank = max(0, new_bank - remaining)
        
        await update_user_money(uzivatel.id, new_hotovost, new_bank)

    await interaction.response.send_message(f"‚úÖ Odebr√°no {actual_castka}$ hr√°ƒçi {uzivatel.display_name}.")

@tree.command(name="reset-penize", description="Resetuje pen√≠ze hr√°ƒçe (admin)")
@app_commands.describe(uzivatel="U≈æivatel, jeho≈æ pen√≠ze chce≈° vynulovat")
async def reset_penize(interaction: discord.Interaction, uzivatel: discord.Member):
    if not is_admin(interaction.user):
        await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return
    
    await update_user_money(uzivatel.id, 0, 0)
    await interaction.response.send_message(f"‚ôªÔ∏è Pen√≠ze hr√°ƒçe {uzivatel.display_name} byly vynulov√°ny.")

@tree.command(name="reset-inventory", description="Resetuje cel√Ω invent√°≈ô hr√°ƒçe (admin)")
@app_commands.describe(uzivatel="U≈æivatel, jeho≈æ invent√°≈ô chce≈° vymazat")
async def reset_inventory(interaction: discord.Interaction, uzivatel: discord.Member):
    if not is_admin(interaction.user):
        await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return
    
    await users_collection.update_one(
        {"_id": str(uzivatel.id)},
        {"$set": {"auta": {}, "zbrane": {}, "veci": {}, "drogy": {}}}
    )
    await interaction.response.send_message(f"‚ôªÔ∏è Invent√°≈ô hr√°ƒçe {uzivatel.display_name} byl √∫spƒõ≈°nƒõ resetov√°n.")

@tree.command(name="pridej-veci", description="P≈ôidej vƒõci do invent√°≈ôe u≈æivatele (admin)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu p≈ôid√°≈° vƒõci", vec="N√°zev vƒõci", mnozstvi="Poƒçet kus≈Ø")
@app_commands.autocomplete(vec=autocomplete_veci)
async def pridej_veci(interaction: discord.Interaction, uzivatel: discord.Member, vec: str, mnozstvi: int):
    if not is_admin(interaction.user):
        await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return

    await add_user_item(uzivatel.id, "veci", vec, mnozstvi)
    await interaction.response.send_message(f"‚úÖ P≈ôid√°no {mnozstvi}√ó `{vec}` u≈æivateli {uzivatel.display_name}.", ephemeral=True)

@tree.command(name="pridej-drogy", description="P≈ôidej drogy do invent√°≈ôe u≈æivatele (admin)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu p≈ôid√°≈° drogy", droga="N√°zev drogy", mnozstvi="Poƒçet gram≈Ø")
@app_commands.autocomplete(droga=autocomplete_drogy)
async def pridej_drogy(interaction: discord.Interaction, uzivatel: discord.Member, droga: str, mnozstvi: int):
    if not is_admin(interaction.user):
        await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return

    await add_user_item(uzivatel.id, "drogy", droga, mnozstvi)
    await interaction.response.send_message(f"‚úÖ P≈ôid√°no {mnozstvi}g `{droga}` u≈æivateli {uzivatel.display_name}.", ephemeral=True)

@tree.command(name="odeber-veci", description="Odeber vƒõci z invent√°≈ôe u≈æivatele (admin/policie)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu odebere≈° vƒõci", vec="N√°zev vƒõci", mnozstvi="Poƒçet kus≈Ø")
@app_commands.autocomplete(vec=autocomplete_odeber_veci)
async def odeber_veci(interaction: discord.Interaction, uzivatel: discord.Member, vec: str, mnozstvi: int):
    if not has_permission(interaction.user):
        await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return

    data = await get_or_create_user(uzivatel.id)
    veci = data.get("veci", {})
    if vec not in veci or veci[vec] < mnozstvi:
        await interaction.response.send_message(f"‚ùå U≈æivateli {uzivatel.display_name} chyb√≠ {mnozstvi}√ó `{vec}`.", ephemeral=True)
        return

    await remove_user_item(uzivatel.id, "veci", vec, mnozstvi)
    await interaction.response.send_message(f"‚úÖ Odebr√°no {mnozstvi}√ó `{vec}` u≈æivateli {uzivatel.display_name}.", ephemeral=True)

@tree.command(name="odeber-drogy", description="Odeber drogy z invent√°≈ôe u≈æivatele (admin/policie)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu odebere≈° drogy", droga="N√°zev drogy", mnozstvi="Poƒçet gram≈Ø")
@app_commands.autocomplete(droga=autocomplete_odeber_drogy)
async def odeber_drogy(interaction: discord.Interaction, uzivatel: discord.Member, droga: str, mnozstvi: int):
    if not has_permission(interaction.user):
        await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return

    data = await get_or_create_user(uzivatel.id)
    drogy = data.get("drogy", {})
    if droga not in drogy or drogy[droga] < mnozstvi:
        await interaction.response.send_message(f"‚ùå U≈æivateli {uzivatel.display_name} chyb√≠ {mnozstvi}g `{droga}`.", ephemeral=True)
        return

    await remove_user_item(uzivatel.id, "drogy", droga, mnozstvi)
    await interaction.response.send_message(f"‚úÖ Odebr√°no {mnozstvi}g `{droga}` u≈æivateli {uzivatel.display_name}.", ephemeral=True)

# === User Commands ===
@tree.command(name="inventory", description="Zobraz√≠ invent√°≈ô hr√°ƒçe")
@app_commands.describe(uzivatel="U≈æivatel, jeho≈æ invent√°≈ô chce≈° zobrazit")
async def inventory(interaction: discord.Interaction, uzivatel: discord.Member = None):
    uzivatel = uzivatel or interaction.user
    data = await get_or_create_user(uzivatel.id)

    auta = data.get("auta", {})
    zbrane = data.get("zbrane", {})
    veci = data.get("veci", {})
    drogy = data.get("drogy", {})

    auta_text = "\n".join(f"üöó {auto} √ó{pocet}" for auto, pocet in auta.items()) or "≈Ω√°dn√°"
    zbrane_text = "\n".join(f"üî´ {zbran} √ó{pocet}" for zbran, pocet in zbrane.items()) or "≈Ω√°dn√©"
    veci_text = "\n".join(f"üì¶ {nazev} √ó{pocet}" for nazev, pocet in veci.items()) or "≈Ω√°dn√©"
    drogy_text = "\n".join(f"üíä {nazev} √ó{gramy}g" for nazev, gramy in drogy.items())

    embed = discord.Embed(
        title=f"üìã Invent√°≈ô u≈æivatele {uzivatel.display_name}",
        color=discord.Color.blue()
    )
    embed.add_field(name="Auta", value=auta_text, inline=False)
    embed.add_field(name="Zbranƒõ", value=zbrane_text, inline=False)
    embed.add_field(name="Vƒõci", value=veci_text, inline=False)

    if drogy:
        embed.add_field(name="Drogy", value=drogy_text, inline=False)

    await interaction.response.send_message(embed=embed)

@tree.command(name="balance", description="Zobraz√≠ finanƒçn√≠ stav")
@app_commands.describe(uzivatel="(Voliteln√©) U≈æivatel, jeho≈æ stav chce≈° zobrazit")
async def balance(interaction: discord.Interaction, uzivatel: discord.Member = None):
    uzivatel = uzivatel or interaction.user
    data = await get_or_create_user(uzivatel.id)

    penize = data.get("penize", 0)
    hotovost = data.get("hotovost", 0)
    bank = data.get("bank", 0)

    embed = discord.Embed(
        title=f"üí∞ Finanƒçn√≠ p≈ôehled pro {uzivatel.display_name}",
        color=discord.Color.gold()
    )
    embed.add_field(name="üíµ Celkem", value=f"{penize:,} $", inline=False)
    embed.add_field(name="üí≥ Hotovost", value=f"{hotovost:,} $", inline=True)
    embed.add_field(name="üè¶ Banka", value=f"{bank:,} $", inline=True)

    await interaction.response.send_message(embed=embed)

@tree.command(name="pay", description="Po≈°le pen√≠ze jin√©mu hr√°ƒçi")
@app_commands.describe(cil="Komu chce≈° poslat pen√≠ze", castka="Kolik penƒõz chce≈° poslat")
async def posli_penize(interaction: discord.Interaction, cil: discord.Member, castka: int):
    if castka <= 0:
        await interaction.response.send_message("‚ùå ƒå√°stka mus√≠ b√Ωt vƒõt≈°√≠ ne≈æ 0.", ephemeral=True)
        return
    
    odesilatel_data = await get_or_create_user(interaction.user.id)
    prijemce_data = await get_or_create_user(cil.id)

    total_money_odesilatel = get_total_money(odesilatel_data)
    if total_money_odesilatel < castka:
        await interaction.response.send_message("‚ùå Nem√°≈° dostatek penƒõz.", ephemeral=True)
        return

    # Remove money from sender (hotovost first, then bank)
    new_sender_hotovost = odesilatel_data["hotovost"]
    new_sender_bank = odesilatel_data["bank"]
    remaining_to_remove = castka
    
    if new_sender_hotovost >= remaining_to_remove:
        new_sender_hotovost -= remaining_to_remove
    else:
        remaining_to_remove -= new_sender_hotovost
        new_sender_hotovost = 0
        new_sender_bank -= remaining_to_remove

    # Add money to receiver's hotovost
    new_receiver_hotovost = prijemce_data["hotovost"] + castka

    await update_user_money(interaction.user.id, new_sender_hotovost, new_sender_bank)
    await update_user_money(cil.id, new_receiver_hotovost, prijemce_data["bank"])
    
    await interaction.response.send_message(f"üí∏ Poslal jsi {castka}$ hr√°ƒçi {cil.display_name}.")

@tree.command(name="vybrat", description="Vybere pen√≠ze z banky do penƒõ≈æenky")
@app_commands.describe(castka="ƒå√°stka, kterou chce≈° vybrat (nebo 'all' pro v≈°echny)")
async def vybrat(interaction: discord.Interaction, castka: str):
    data = await get_or_create_user(interaction.user.id)

    if castka.lower() == "all":
        actual_castka = data.get("bank", 0)
        if actual_castka <= 0:
            await interaction.response.send_message("‚ùå Nem√°≈° ≈æ√°dn√© pen√≠ze v bance.", ephemeral=True)
            return
        new_bank = 0
        new_hotovost = data["hotovost"] + actual_castka
    else:
        try:
            actual_castka = int(castka)
            if actual_castka <= 0:
                await interaction.response.send_message("‚ùå ƒå√°stka mus√≠ b√Ωt vƒõt≈°√≠ ne≈æ 0.", ephemeral=True)
                return
        except ValueError:
            await interaction.response.send_message("‚ùå Neplatn√° ƒç√°stka. Pou≈æij ƒç√≠slo nebo 'all'.", ephemeral=True)
            return

        if data.get("bank", 0) < actual_castka:
            await interaction.response.send_message("‚ùå Nem√°≈° dostatek penƒõz v bance.", ephemeral=True)
            return

        new_bank = data["bank"] - actual_castka
        new_hotovost = data["hotovost"] + actual_castka

    await update_user_money(interaction.user.id, new_hotovost, new_bank)
    await interaction.response.send_message(f"‚úÖ Vybral jsi {actual_castka:,} $ z banky do penƒõ≈æenky.")

@tree.command(name="vlozit", description="Vlo≈æ√≠ pen√≠ze z penƒõ≈æenky do banky")
@app_commands.describe(castka="ƒå√°stka, kterou chce≈° vlo≈æit (nebo 'all' pro v≈°echny)")
async def vlozit(interaction: discord.Interaction, castka: str):
    data = await get_or_create_user(interaction.user.id)

    if castka.lower() == "all":
        actual_castka = data.get("hotovost", 0)
        if actual_castka <= 0:
            await interaction.response.send_message("‚ùå Nem√°≈° ≈æ√°dn√© pen√≠ze v penƒõ≈æence.", ephemeral=True)
            return
        new_hotovost = 0
        new_bank = data["bank"] + actual_castka
    else:
        try:
            actual_castka = int(castka)
            if actual_castka <= 0:
                await interaction.response.send_message("‚ùå ƒå√°stka mus√≠ b√Ωt vƒõt≈°√≠ ne≈æ 0.", ephemeral=True)
                return
        except ValueError:
            await interaction.response.send_message("‚ùå Neplatn√° ƒç√°stka. Pou≈æij ƒç√≠slo nebo 'all'.", ephemeral=True)
            return

        if data.get("hotovost", 0) < actual_castka:
            await interaction.response.send_message("‚ùå Nem√°≈° dostatek penƒõz v penƒõ≈æence.", ephemeral=True)
            return

        new_hotovost = data["hotovost"] - actual_castka
        new_bank = data["bank"] + actual_castka

    await update_user_money(interaction.user.id, new_hotovost, new_bank)
    await interaction.response.send_message(f"‚úÖ Vlo≈æil jsi {actual_castka:,} $ z penƒõ≈æenky do banky.")

@tree.command(name="collect", description="Vybere≈° si t√Ωdenn√≠ v√Ωplatu podle sv√Ωch rol√≠ (ka≈æd√° m√° vlastn√≠ cooldown).")
async def collect(interaction: discord.Interaction):
    now = datetime.datetime.utcnow()
    data = await get_or_create_user(interaction.user.id)

    if "collect_timestamps" not in data:
        data["collect_timestamps"] = {}

    user_role_ids = [role.id for role in interaction.user.roles]

    vyplaceno = 0
    vyplacene_role = []
    cekajici_role = []

    for role_id, castka in ROLE_ODMENY.items():
        if role_id not in user_role_ids:
            continue

        posledni = data["collect_timestamps"].get(str(role_id))
        if posledni:
            posledni_cas = datetime.datetime.fromisoformat(posledni)
            rozdil = now - posledni_cas
            if rozdil < datetime.timedelta(days=7):
                zb√Ωv√° = datetime.timedelta(days=7) - rozdil
                hodiny, zbytek = divmod(zb√Ωv√°.total_seconds(), 3600)
                minuty = int((zbytek % 3600) // 60)
                cekajici_role.append((role_id, hodiny, minuty))
                continue

        vyplaceno += castka
        vyplacene_role.append((role_id, castka))
        data["collect_timestamps"][str(role_id)] = now.isoformat()

    if vyplaceno > 0:
        new_hotovost = data.get("hotovost", 0) + vyplaceno
        await update_user_money(interaction.user.id, new_hotovost, data.get("bank", 0))
        await save_user(interaction.user.id, data)

    embed = discord.Embed(
        title="üí∞ T√Ωdenn√≠ v√Ωplata",
        color=discord.Color.green()
    )
    if vyplacene_role:
        popis = ""
        for role_id, castka in vyplacene_role:
            role_obj = discord.utils.get(interaction.guild.roles, id=role_id)
            nazev = role_obj.name if role_obj else f"Role ID {role_id}"
            popis += f"‚úÖ **{nazev}**: +{castka:,} $\n"
        embed.add_field(name="üí∏ Vyplaceno", value=popis, inline=False)

    if cekajici_role:
        cekani = ""
        for role_id, h, m in cekajici_role:
            role_obj = discord.utils.get(interaction.guild.roles, id=role_id)
            nazev = role_obj.name if role_obj else f"Role ID {role_id}"
            cekani += f"‚è≥ **{nazev}** ‚Äì za {int(h)}h {int(m)}m\n"
        embed.add_field(name="üïí Nelze vybrat (je≈°tƒõ cooldown)", value=cekani, inline=False)

    if not vyplacene_role:
        embed.description = "‚ùå Tento t√Ωden u≈æ sis vybral odmƒõnu za v≈°echny sv√© role."

    await interaction.response.send_message(embed=embed, ephemeral=True)

ZAZNAMU_NA_STRANKU = 10

class LeaderboardView(ui.View):
        def __init__(self, leaderboard_data, interaction_user, guild, page=0):
            super().__init__(timeout=60)
            self.leaderboard_data = leaderboard_data
            self.interaction_user = interaction_user
            self.guild = guild
            self.page = page
            self.max_pages = max(1, math.ceil(len(self.leaderboard_data) / ZAZNAMU_NA_STRANKU))

        def generate_embed(self):
            zacatek = self.page * ZAZNAMU_NA_STRANKU
            konec = zacatek + ZAZNAMU_NA_STRANKU
            strankovany = self.leaderboard_data[zacatek:konec]

            embed = Embed(
                title="üí∞ Leaderboard ‚Äì Nejbohat≈°√≠ hr√°ƒçi",
                description=f"Str√°nka {self.page + 1}/{self.max_pages}",
                color=discord.Color.gold()
            )

            for index, (user_id, total) in enumerate(strankovany, start=zacatek + 1):
                user = self.guild.get_member(user_id)
                jmeno = user.display_name if user else f"<@{user_id}>"
                embed.add_field(
                    name=f"#{index} ‚Äì {jmeno}",
                    value=f"üíµ {total:,} $",
                    inline=False
                )
            return embed

        @ui.button(label="‚óÄÔ∏è", style=ButtonStyle.blurple)
        async def predchozi(self, interaction: Interaction, button: ui.Button):
            if interaction.user != self.interaction_user:
                await interaction.response.send_message("‚ùå Tohle nen√≠ tvoje interakce.", ephemeral=True)
                return
            if self.page > 0:
                self.page -= 1
                await interaction.response.edit_message(embed=self.generate_embed(), view=self)

        @ui.button(label="‚ñ∂Ô∏è", style=ButtonStyle.blurple)
        async def dalsi(self, interaction: Interaction, button: ui.Button):
            if interaction.user != self.interaction_user:
                await interaction.response.send_message("‚ùå Tohle nen√≠ tvoje interakce.", ephemeral=True)
                return
            if self.page < self.max_pages - 1:
                self.page += 1
                await interaction.response.edit_message(embed=self.generate_embed(), view=self)


@tree.command(name="leaderboard", description="Zobraz√≠ ≈æeb≈ô√≠ƒçek nejbohat≈°√≠ch hr√°ƒç≈Ø")
async def leaderboard(interaction: discord.Interaction):
        await interaction.response.defer()

        cursor = users_collection.find({}, {"_id": 1, "penize": 1})
        users_data = await cursor.to_list(length=None)

        if not users_data:
            await interaction.followup.send("‚ùå ≈Ω√°dn√° data k zobrazen√≠.", ephemeral=True)
            return

        leaderboard = [(int(user["_id"]), user.get("penize", 0)) for user in users_data]
        leaderboard.sort(key=lambda x: x[1], reverse=True)

        view = LeaderboardView(leaderboard, interaction.user, interaction.guild, page=0)
        embed = view.generate_embed()

        await interaction.followup.send(embed=embed, view=view)

# === Shopping Commands ===
@tree.command(name="kup-auto", description="Koup√≠ auto za pen√≠ze")
@app_commands.describe(auto="Auto, kter√© chce≈° koupit", pocet="Kolik kus≈Ø chce≈° koupit")
async def kup_auto(interaction: discord.Interaction, auto: str, pocet: int = 1):
    data = await get_or_create_user(interaction.user.id)

    if auto not in CENY_AUT:
        await interaction.response.send_message(f"‚ùå Auto `{auto}` nen√≠ dostupn√© k n√°kupu.", ephemeral=True)
        return

    cena = CENY_AUT[auto] * pocet
    total_money = get_total_money(data)
    if total_money < cena:
        await interaction.response.send_message(f"‚ùå Nem√°≈° dostatek penƒõz. Pot≈ôebuje≈° {cena}$.", ephemeral=True)
        return

    # Remove money from buyer (hotovost first, then bank)
    new_hotovost = data["hotovost"]
    new_bank = data["bank"]
    remaining_to_remove = cena
    
    if new_hotovost >= remaining_to_remove:
        new_hotovost -= remaining_to_remove
    else:
        remaining_to_remove -= new_hotovost
        new_hotovost = 0
        new_bank -= remaining_to_remove

    await update_user_money(interaction.user.id, new_hotovost, new_bank)
    await add_user_item(interaction.user.id, "auta", auto, pocet)
    
    await interaction.response.send_message(f"‚úÖ Koupil jsi {pocet}x `{auto}` za {cena}$.")

@kup_auto.autocomplete("auto")
async def autocomplete_kup_auto(interaction: discord.Interaction, current: str):
    return [
        app_commands.Choice(name=a, value=a)
        for a in CENY_AUT.keys() if current.lower() in a.lower()
    ][:25]

@tree.command(name="koupit-zbran", description="Koupit zbra≈à z nab√≠dky")
@app_commands.describe(zbran="Zbra≈à, kterou chce≈° koupit", pocet="Poƒçet kus≈Ø")
async def koupit_zbran(interaction: discord.Interaction, zbran: str, pocet: int = 1):
    role_id = 1293617188988784667
    if not any(role.id == role_id for role in interaction.user.roles):
        await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ koupit zbranƒõ.", ephemeral=True)
        return

    data = await get_or_create_user(interaction.user.id)

    if zbran not in CENY_ZBRANI:
        await interaction.response.send_message(f"‚ùå Zbra≈à `{zbran}` nen√≠ v nab√≠dce k prodeji.", ephemeral=True)
        return

    cena_za_kus = CENY_ZBRANI[zbran]
    celkova_cena = cena_za_kus * pocet

    total_money = get_total_money(data)
    if total_money < celkova_cena:
        await interaction.response.send_message(
            f"‚ùå Nem√°≈° dostatek penƒõz ({total_money:,}$) na koupi {pocet}x `{zbran}` (pot≈ôebuje≈° {celkova_cena:,}$).",
            ephemeral=True
        )
        return

    # Remove money from buyer (hotovost first, then bank)
    new_hotovost = data["hotovost"]
    new_bank = data["bank"]
    remaining_to_remove = celkova_cena
    
    if new_hotovost >= remaining_to_remove:
        new_hotovost -= remaining_to_remove
    else:
        remaining_to_remove -= new_hotovost
        new_hotovost = 0
        new_bank -= remaining_to_remove

    await update_user_money(interaction.user.id, new_hotovost, new_bank)
    await add_user_item(interaction.user.id, "zbrane", zbran, pocet)
    
    await interaction.response.send_message(f"‚úÖ Koupil jsi {pocet}x `{zbran}` za {celkova_cena:,}$.")

@koupit_zbran.autocomplete("zbran")
async def autocomplete_koupit_zbran(interaction: discord.Interaction, current: str):
    return [app_commands.Choice(name=z, value=z) for z in CENY_ZBRANI if current.lower() in z.lower()][:25]

@tree.command(name="kup-veci", description="Kup si suroviny nebo n√°stroje")
@app_commands.describe(veci="N√°zev vƒõci, kterou chce≈° koupit", pocet="Poƒçet kus≈Ø")
@app_commands.autocomplete(veci=autocomplete_veci)
async def kup_veci(interaction: discord.Interaction, veci: str, pocet: int = 1):
    data = await get_or_create_user(interaction.user.id)

    if veci not in CENY_VECI:
        await interaction.response.send_message("‚ùå Tato vƒõc nen√≠ dostupn√° k prodeji.", ephemeral=True)
        return

    cena = CENY_VECI[veci] * pocet
    if data["hotovost"] < cena:
        await interaction.response.send_message(f"‚ùå Nem√°≈° dostatek penƒõz (pot≈ôebuje≈° {cena:,}$).", ephemeral=True)
        return

    new_hotovost = data["hotovost"] - cena
    await update_user_money(interaction.user.id, new_hotovost, data["bank"])
    await add_user_item(interaction.user.id, "veci", veci, pocet)
    
    await interaction.response.send_message(f"‚úÖ Koupil jsi {pocet}x `{veci}` za {cena:,}$.")
    await log_action(bot, interaction.guild, f"{interaction.user.mention} koupil {pocet}x {veci} za {cena:,}$")

# === Trading Commands ===
@tree.command(name="prodej-auto", description="Prod√° auto jin√©mu hr√°ƒçi")
@app_commands.describe(kupec="Komu prod√°v√°≈° auto", auto="Jak√© auto prod√°v√°≈°", cena="Cena za auto")
async def prodej_auto(interaction: discord.Interaction, kupec: discord.Member, auto: str, cena: int):
    prodavajici_data = await get_or_create_user(interaction.user.id)
    kupec_data = await get_or_create_user(kupec.id)

    if auto not in prodavajici_data["auta"]:
        await interaction.response.send_message("‚ùå Nem√°≈° toto auto v invent√°≈ôi.", ephemeral=True)
        return
    if prodavajici_data["auta"][auto] <= 0:
        await interaction.response.send_message("‚ùå Nem√°≈° ≈æ√°dn√© kusy tohoto auta.", ephemeral=True)
        return
    total_money_kupec = get_total_money(kupec_data)
    if total_money_kupec < cena:
        await interaction.response.send_message("‚ùå Kupuj√≠c√≠ nem√° dostatek penƒõz.", ephemeral=True)
        return

    view = ConfirmationView(interaction.user, kupec, auto, "auto", cena)

    embed = discord.Embed(
        title="üöó Potvrzen√≠ n√°kupu auta",
        description=f"**Prod√°vaj√≠c√≠:** {interaction.user.display_name}\n**Kupuj√≠c√≠:** {kupec.display_name}\n**Auto:** {auto}\n**Cena:** {cena:,}$",
        color=discord.Color.orange()
    )
    embed.add_field(name="‚è∞ ƒåek√°m na potvrzen√≠", value=f"{kupec.mention}, potvrƒè pros√≠m n√°kup kliknut√≠m na tlaƒç√≠tko n√≠≈æe.", inline=False)

    await interaction.response.send_message(embed=embed, view=view)
    await view.wait()

    if view.result is True:
        # Remove car from seller
        await remove_user_item(interaction.user.id, "auta", auto, 1)
        # Add car to buyer
        await add_user_item(kupec.id, "auta", auto, 1)

        # Remove money from buyer
        new_kupec_hotovost = kupec_data["hotovost"]
        new_kupec_bank = kupec_data["bank"]
        remaining_to_remove = cena
        
        if new_kupec_hotovost >= remaining_to_remove:
            new_kupec_hotovost -= remaining_to_remove
        else:
            remaining_to_remove -= new_kupec_hotovost
            new_kupec_hotovost = 0
            new_kupec_bank -= remaining_to_remove

        # Add money to seller
        new_prodavajici_hotovost = prodavajici_data["hotovost"] + cena

        await update_user_money(kupec.id, new_kupec_hotovost, new_kupec_bank)
        await update_user_money(interaction.user.id, new_prodavajici_hotovost, prodavajici_data["bank"])

        success_embed = discord.Embed(
            title="‚úÖ Obchod dokonƒçen!",
            description=f"Auto `{auto}` bylo √∫spƒõ≈°nƒõ prod√°no {kupec.display_name} za {cena:,}$.",
            color=discord.Color.green()
        )
        await interaction.followup.send(embed=success_embed)
    elif view.result is False:
        fail_embed = discord.Embed(
            title="‚ùå Obchod zru≈°en",
            description="Obchod byl zru≈°en nebo vypr≈°el ƒças na potvrzen√≠.",
            color=discord.Color.red()
        )
        await interaction.followup.send(embed=fail_embed)

@prodej_auto.autocomplete("auto")
async def autocomplete_prodej_auto(interaction: discord.Interaction, current: str):
    data = await get_or_create_user(interaction.user.id)
    auta = data.get("auta", {})
    return [app_commands.Choice(name=a, value=a) for a in auta if current.lower() in a.lower()][:25]

@tree.command(name="prodej-zbran", description="Prod√° zbra≈à jin√©mu hr√°ƒçi")
@app_commands.describe(kupec="Komu prod√°v√°≈° zbra≈à", zbran="Jakou zbra≈à prod√°v√°≈°", cena="Cena za zbra≈à")
async def prodej_zbran(interaction: discord.Interaction, kupec: discord.Member, zbran: str, cena: int):
    prodavajici_data = await get_or_create_user(interaction.user.id)
    kupec_data = await get_or_create_user(kupec.id)

    if zbran not in prodavajici_data["zbrane"]:
        await interaction.response.send_message("‚ùå Nem√°≈° tuto zbra≈à v invent√°≈ôi.", ephemeral=True)
        return
    if prodavajici_data["zbrane"][zbran] <= 0:
        await interaction.response.send_message("‚ùå Nem√°≈° ≈æ√°dn√© kusy t√©to zbranƒõ.", ephemeral=True)
        return
    total_money_kupec = get_total_money(kupec_data)
    if total_money_kupec < cena:
        await interaction.response.send_message("‚ùå Kupuj√≠c√≠ nem√° dostatek penƒõz.", ephemeral=True)
        return

    view = ConfirmationView(interaction.user, kupec, zbran, "zbran", cena)

    embed = discord.Embed(
        title="üî´ Potvrzen√≠ n√°kupu zbranƒõ",
        description=f"**Prod√°vaj√≠c√≠:** {interaction.user.display_name}\n**Kupuj√≠c√≠:** {kupec.display_name}\n**Zbra≈à:** {zbran}\n**Cena:** {cena:,}$",
        color=discord.Color.orange()
    )
    embed.add_field(name="‚è∞ ƒåek√°m na potvrzen√≠", value=f"{kupec.mention}, potvrƒè pros√≠m n√°kup kliknut√≠m na tlaƒç√≠tko n√≠≈æe.", inline=False)

    await interaction.response.send_message(embed=embed, view=view)
    await view.wait()

    if view.result is True:
        # Remove weapon from seller
        await remove_user_item(interaction.user.id, "zbrane", zbran, 1)
        # Add weapon to buyer
        await add_user_item(kupec.id, "zbrane", zbran, 1)

        # Remove money from buyer
        new_kupec_hotovost = kupec_data["hotovost"]
        new_kupec_bank = kupec_data["bank"]
        remaining_to_remove = cena
        
        if new_kupec_hotovost >= remaining_to_remove:
            new_kupec_hotovost -= remaining_to_remove
        else:
            remaining_to_remove -= new_kupec_hotovost
            new_kupec_hotovost = 0
            new_kupec_bank -= remaining_to_remove

        # Add money to seller
        new_prodavajici_hotovost = prodavajici_data["hotovost"] + cena

        await update_user_money(kupec.id, new_kupec_hotovost, new_kupec_bank)
        await update_user_money(interaction.user.id, new_prodavajici_hotovost, prodavajici_data["bank"])

        success_embed = discord.Embed(
            title="‚úÖ Obchod dokonƒçen!",
            description=f"Zbra≈à `{zbran}` byla √∫spƒõ≈°nƒõ prod√°na {kupec.display_name} za {cena:,}$.",
            color=discord.Color.green()
        )
        await interaction.followup.send(embed=success_embed)
    elif view.result is False:
        fail_embed = discord.Embed(
            title="‚ùå Obchod zru≈°en",
            description="Obchod byl zru≈°en nebo vypr≈°el ƒças na potvrzen√≠.",
            color=discord.Color.red()
        )
        await interaction.followup.send(embed=fail_embed)

@prodej_zbran.autocomplete("zbran")
async def autocomplete_prodej_zbran(interaction: discord.Interaction, current: str):
    data = await get_or_create_user(interaction.user.id)
    zbrane = data.get("zbrane", {})
    return [app_commands.Choice(name=z, value=z) for z in zbrane if current.lower() in z.lower()][:25]

@tree.command(name="prodej-veci", description="Prodej vƒõc nebo drogu jin√©mu hr√°ƒçi")
@app_commands.describe(
    cil="Komu chce≈° vƒõc nebo drogu prodat",
    vec="N√°zev vƒõci nebo drogy",
    mnozstvi="Kolik kus≈Ø/gram≈Ø chce≈° prodat",
    cena="Cena za v≈°e v $"
)
@app_commands.autocomplete(vec=autocomplete_veci_drogy)
async def prodej_veci(interaction: discord.Interaction, cil: discord.Member, vec: str, mnozstvi: int, cena: int):
    prodavajici = interaction.user
    if prodavajici.id == cil.id:
        await interaction.response.send_message("‚ùå Nem≈Ø≈æe≈° prod√°vat s√°m sobƒõ.", ephemeral=True)
        return

    data_prodejce = await get_or_create_user(prodavajici.id)
    data_kupce = await get_or_create_user(cil.id)

    # Check inventory
    inventar = data_prodejce.get("veci", {}) | data_prodejce.get("drogy", {})
    if vec not in inventar or inventar[vec] < mnozstvi:
        await interaction.response.send_message("‚ùå Nem√°≈° dostatek tohoto p≈ôedmƒõtu nebo drogy.", ephemeral=True)
        return

    embed = discord.Embed(
        title="üí∏ Nab√≠dka k prodeji",
        description=f"{prodavajici.mention} nab√≠z√≠ `{mnozstvi}x {vec}` za `{cena:,}$` {cil.mention}.",
        color=discord.Color.green()
    )

    class Potvrzeni(discord.ui.View):
        def __init__(self, timeout=60):
            super().__init__(timeout=timeout)
            self.prodej_potvrzen = None

        @discord.ui.button(label="‚úÖ P≈ôijmout", style=discord.ButtonStyle.success)
        async def prijmout(self, interaction_button: discord.Interaction, button: discord.ui.Button):
            if interaction_button.user.id != cil.id:
                await interaction_button.response.send_message("‚ùå Tohle nen√≠ tvoje nab√≠dka.", ephemeral=True)
                return
            self.prodej_potvrzen = True
            self.stop()
            await interaction_button.response.defer()

        @discord.ui.button(label="‚ùå Odm√≠tnout", style=discord.ButtonStyle.danger)
        async def odmitnout(self, interaction_button: discord.Interaction, button: discord.ui.Button):
            if interaction_button.user.id != cil.id:
                await interaction_button.response.send_message("‚ùå Tohle nen√≠ tvoje nab√≠dka.", ephemeral=True)
                return
            self.prodej_potvrzen = False
            self.stop()
            await interaction_button.response.defer()

    view = Potvrzeni()
    await interaction.response.send_message(embed=embed, view=view)
    await view.wait()

    if view.prodej_potvrzen is None:
        await interaction.edit_original_response(content="‚è≥ ƒåas na odpovƒõƒè vypr≈°el.", embed=None, view=None)
        return

    if not view.prodej_potvrzen:
        await interaction.edit_original_response(content="‚ùå Kupuj√≠c√≠ odm√≠tl nab√≠dku.", embed=None, view=None)
        return

    total_money_kupce = get_total_money(data_kupce)
    if total_money_kupce < cena:
        await interaction.edit_original_response(content="‚ùå Kupuj√≠c√≠ nem√° dost penƒõz.", embed=None, view=None)
        return

    # Determine item type and transfer
    if vec in data_prodejce.get("veci", {}):
        await remove_user_item(prodavajici.id, "veci", vec, mnozstvi)
        await add_user_item(cil.id, "veci", vec, mnozstvi)
    else:
        await remove_user_item(prodavajici.id, "drogy", vec, mnozstvi)
        await add_user_item(cil.id, "drogy", vec, mnozstvi)

    # Transfer money
    new_kupec_hotovost = data_kupce["hotovost"]
    new_kupec_bank = data_kupce["bank"]
    remaining_to_remove = cena
    
    if new_kupec_hotovost >= remaining_to_remove:
        new_kupec_hotovost -= remaining_to_remove
    else:
        remaining_to_remove -= new_kupec_hotovost
        new_kupec_hotovost = 0
        new_kupec_bank -= remaining_to_remove

    new_prodavajici_hotovost = data_prodejce["hotovost"] + cena

    await update_user_money(cil.id, new_kupec_hotovost, new_kupec_bank)
    await update_user_money(prodavajici.id, new_prodavajici_hotovost, data_prodejce["bank"])

    await interaction.edit_original_response(
        content=f"‚úÖ {cil.mention} koupil {mnozstvi}x `{vec}` za {cena:,}$ od {prodavajici.mention}.",
        embed=None,
        view=None
    )

# === Drug Commands ===
@tree.command(name="vyrob", description="Vyrob neleg√°ln√≠ l√°tku")
@app_commands.describe(droga="Druh drogy", mnozstvi="Kolik gram≈Ø chce≈° vyrobit")
@app_commands.autocomplete(droga=autocomplete_drogy)
async def vyrob(interaction: discord.Interaction, droga: str, mnozstvi: int = 10):
    uzivatel = interaction.user
    data = await get_or_create_user(uzivatel.id)

    if mnozstvi % 10 != 0 or mnozstvi <= 0:
        return await interaction.response.send_message("‚ùå V√Ωroba je mo≈æn√° pouze po 10g d√°vk√°ch (nap≈ô. 10, 20, 30...).", ephemeral=True)

    recept = RECEPTY.get(droga)
    if not recept:
        return await interaction.response.send_message("‚ùå Tato droga neexistuje.", ephemeral=True)

    nyni = datetime.datetime.utcnow()
    posledni = data.get("last_vyroba")
    if posledni:
        rozdil = (nyni - datetime.datetime.fromisoformat(posledni)).total_seconds()
        if rozdil < VYROBA_COOLDOWN * 60:
            zbyva = int((VYROBA_COOLDOWN * 60 - rozdil) / 60)
            return await interaction.response.send_message(f"‚è≥ Mus√≠≈° poƒçkat {zbyva} minut p≈ôed dal≈°√≠ v√Ωrobou.", ephemeral=True)

    veci = data.get("veci", {})
    davky = mnozstvi // 10

    # Check materials
    for surovina, pocet in recept["suroviny"].items():
        if veci.get(surovina, 0) < pocet * davky:
            return await interaction.response.send_message(f"‚ùå Nem√°≈° dostatek `{surovina}`.", ephemeral=True)

    # Check tools
    for nastroj, pocet in recept["nastroje"].items():
        if veci.get(nastroj, 0) < pocet:
            return await interaction.response.send_message(f"‚ùå Chyb√≠ ti n√°stroj `{nastroj}`.", ephemeral=True)

    # Remove materials
    for surovina, pocet in recept["suroviny"].items():
        await remove_user_item(uzivatel.id, "veci", surovina, pocet * davky)

    await update_user_field(uzivatel.id, "last_vyroba", nyni.isoformat())
    celkovy_cas = recept["cas"] * davky

    await interaction.response.send_message(
        f"üß™ Zaƒçal jsi vyr√°bƒõt {mnozstvi}g `{droga}`.\n‚è≥ Dokonƒçen√≠ za {celkovy_cas} minut...", ephemeral=True)

    # Async production
    async def dokonci_vyrobu():
        await asyncio.sleep(celkovy_cas * 60)

        # Chance of failure
        if random.random() < recept["selhani"]:
            for nastroj, pocet in recept["nastroje"].items():
                await remove_user_item(uzivatel.id, "veci", nastroj, pocet)
            try:
                await uzivatel.send(f"‚ùå V√Ωroba {mnozstvi}g `{droga}` selhala. P≈ôi≈°el jsi o suroviny i n√°stroje.")
            except:
                pass
            return

        # Successful production
        await add_user_item(uzivatel.id, "drogy", droga, mnozstvi)
        try:
            await uzivatel.send(f"‚úÖ V√Ωroba dokonƒçena: {mnozstvi}g `{droga}` bylo p≈ôid√°no do invent√°≈ôe.")
        except:
            pass

    asyncio.create_task(dokonci_vyrobu())

@tree.command(name="pozij-drogu", description="Po≈æij drogu z invent√°≈ôe a z√≠skej doƒçasn√© √∫ƒçinky")
@app_commands.describe(droga="Droga, kterou chce≈° pou≈æ√≠t", mnozstvi="Kolik gram≈Ø chce≈° po≈æ√≠t")
@app_commands.autocomplete(droga=autocomplete_drogy_ve_inventari)
async def pozij_drogu(interaction: discord.Interaction, droga: str, mnozstvi: int):
    uzivatel = interaction.user
    data = await get_or_create_user(uzivatel.id)

    drogy = data.get("drogy", {})

    if droga not in drogy:
        await interaction.response.send_message("‚ùå Tuto drogu nem√°≈° v invent√°≈ôi.", ephemeral=True)
        return

    if mnozstvi <= 0:
        await interaction.response.send_message("‚ùå Mno≈æstv√≠ mus√≠ b√Ωt vƒõt≈°√≠ ne≈æ 0.", ephemeral=True)
        return

    if drogy[droga] < mnozstvi:
        await interaction.response.send_message(f"‚ùå M√°≈° pouze {drogy[droga]}g `{droga}`.", ephemeral=True)
        return

    # Remove from inventory
    await remove_user_item(uzivatel.id, "drogy", droga, mnozstvi)

    UCINKY_DROG = {
        "Marihuana": ("üßò Uklidnƒõn√≠ + zpomalen√≠ reakce", 5),
        "Kokain": ("‚ö° Zv√Ω≈°en√≠ energie a agresivity", 8),
        "Metamfetamin": ("üî• Extr√©mn√≠ bdƒõlost a hyperaktivita", 10),
        "Pervitin": ("üåÄ Siln√° euforie a soust≈ôedƒõn√≠", 10),
        "Ext√°ze": ("üíñ Euforie a emoƒçn√≠ vlny", 7),
        "Heroin": ("üò¥ Ospalost a utlumen√≠ bolesti", 12),
    }

    ucinek_text, trvani = UCINKY_DROG.get(droga, ("‚ùì Nezn√°m√© √∫ƒçinky", 5))

    embed = discord.Embed(
        title=f"üíä {droga} pou≈æita",
        description=(
            f"**{uzivatel.display_name}** pr√°vƒõ po≈æil {mnozstvi}g `{droga}`.\n\n"
            f"üß† **√öƒçinek:** {ucinek_text}\n"
            f"‚è≥ **Doba trv√°n√≠ √∫ƒçinku:** {trvani}*{mnozstvi} minut (OOC)"
        ),
        color=discord.Color.purple()
    )
    await interaction.response.send_message(embed=embed)

@tree.command(name="recepty", description="Zobraz√≠ seznam recept≈Ø pro v√Ωrobu drog")
async def recepty(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üß™ Recepty na v√Ωrobu drog",
        description="Zde je seznam v≈°ech dostupn√Ωch drog, jejich po≈æadavk≈Ø a ≈°anc√≠ na selh√°n√≠.",
        color=discord.Color.dark_red()
    )

    for droga, info in RECEPTY.items():
        suroviny = "\n".join(f"- {nazev} √ó{pocet}" for nazev, pocet in info["suroviny"].items())
        nastroje = "\n".join(f"- {nazev} √ó{pocet}" for nazev, pocet in info["nastroje"].items())
        cas = info["cas"]
        selhani = int(info["selhani"] * 100)

        embed.add_field(
            name=f"üíä {droga}",
            value=(
                f"**üßÇ Suroviny:**\n{suroviny}\n"
                f"**üõ†Ô∏è N√°stroje:**\n{nastroje}\n"
                f"‚è≥ **ƒåas v√Ωroby:** {cas} minut / 10g\n"
                f"‚ö†Ô∏è **≈†ance na selh√°n√≠:** {selhani}%"
            ),
            inline=False
        )

    await interaction.response.send_message(embed=embed)

# === Utility Commands ===
@tree.command(name="prikazy", description="Zobraz√≠ seznam v≈°ech dostupn√Ωch p≈ô√≠kaz≈Ø a jejich popis")
async def prikazy(interaction: discord.Interaction):
    embed = discord.Embed(title="üìú Seznam p≈ô√≠kaz≈Ø", color=discord.Color.green())

    embed.add_field(name="/inventory [u≈æivatel]", value="Zobraz√≠ invent√°≈ô hr√°ƒçe (auta, zbranƒõ, vƒõci, drogy).", inline=False)
    embed.add_field(name="/koupit-zbran [zbra≈à] [poƒçet]", value="Koup√≠≈° zbra≈à z nab√≠dky, pokud m√°≈° opr√°vnƒõn√≠ a pen√≠ze.", inline=False)
    embed.add_field(name="/prodej-zbran [u≈æivatel] [zbra≈à] [poƒçet]", value="Prod√°≈° zbra≈à jin√©mu hr√°ƒçi, s potvrzen√≠m od kupuj√≠c√≠ho.", inline=False)
    embed.add_field(name="/koupit-auto [auto]", value="Koup√≠≈° auto z nab√≠dky.", inline=False)
    embed.add_field(name="/prodej-auto [u≈æivatel] [auto]", value="Prod√°≈° auto jin√©mu hr√°ƒçi, s potvrzen√≠m od kupuj√≠c√≠ho.", inline=False)
    embed.add_field(name="/kup-veci [vƒõc] [poƒçet]", value="Koup√≠≈° vƒõci pot≈ôebn√© pro v√Ωrobu neleg√°ln√≠ch l√°tek.", inline=False)
    embed.add_field(name="/prodej-veci [u≈æivatel] [vƒõc] [poƒçet] [cena]", value="Prod√°≈° vƒõci jin√©mu hr√°ƒçi za urƒçenou cenu.", inline=False)
    embed.add_field(name="/vyrob [droga] [gramy]", value="Zaƒçne v√Ωrobu drogy, trv√° urƒçitou dobu, m≈Ø≈æe selhat.", inline=False)
    embed.add_field(name="/pozij-drogu [droga] [gramy]", value="Pou≈æije≈° drogu ze sv√©ho invent√°≈ôe, aktivuj√≠ se efekty.", inline=False)
    embed.add_field(name="/balance", value="Zobraz√≠ stav penƒõ≈æenky a bankovn√≠ho √∫ƒçtu.", inline=False)
    embed.add_field(name="/vybrat [ƒç√°stka]", value="Vybere≈° pen√≠ze z banky do penƒõ≈æenky.", inline=False)
    embed.add_field(name="/vlozit [ƒç√°stka]", value="Vlo≈æ√≠≈° pen√≠ze z penƒõ≈æenky na bankovn√≠ √∫ƒçet.", inline=False)
    embed.add_field(name="/collect", value="Vybere≈° t√Ωdenn√≠ odmƒõnu podle rol√≠.", inline=False)
    embed.add_field(name="/leaderboard", value="Zobraz√≠ ≈æeb≈ô√≠ƒçek hr√°ƒç≈Ø podle jejich penƒõz.", inline=False)
    embed.add_field(name="/odeber-veci [u≈æivatel] [vƒõc] [poƒçet]", value="Odebere vƒõci z invent√°≈ôe hr√°ƒçe (pouze policie/admin).", inline=False)
    embed.add_field(name="/odeber-drogy [u≈æivatel] [droga] [gramy]", value="Odebere drogy z invent√°≈ôe hr√°ƒçe (pouze policie/admin).", inline=False)
    embed.add_field(name="/reset-inventory [u≈æivatel]", value="Resetuje cel√Ω invent√°≈ô hr√°ƒçe (pouze policie/admin).", inline=False)
    embed.add_field(name="/prikazy", value="Zobraz√≠ tento seznam p≈ô√≠kaz≈Ø.", inline=False)

    await interaction.response.send_message(embed=embed, ephemeral=True)

@tree.command(name="try", description="Zkus nƒõco prov√©st a zjisti, jestli se to povedlo.")
@app_commands.describe(akce="Co se pokou≈°√≠≈° udƒõlat?")
async def try_cmd(interaction: discord.Interaction, akce: str):
    user = interaction.user
    vysledek = random.choice(["‚úÖ Ano", "‚ùå Ne"])

    embed = discord.Embed(
        title="üé≤ Pokus o akci",
        description=f"**{user.display_name} se pokusil(a):** `{akce}`\n\n**V√Ωsledek:** {vysledek}",
        color=discord.Color.green() if "Ano" in vysledek else discord.Color.red()
    )

    await interaction.response.send_message(embed=embed)

bot.run(TOKEN)
