import discord
from discord import app_commands
import json
import os
from discord.ext import commands
import asyncio
from keep_alive import keep_alive
from random import random
from operator import itemgetter
from discord.ui import View, Button
from pymongo import MongoClient
from bson.objectid import ObjectId
from datetime import datetime, timedelta
import urllib.parse
import re


from config import *

TOKEN = os.getenv("DISCORD_BOT_TOKEN")
keep_alive()
intents = discord.Intents.default()
intents.message_content = True
intents.members = True


bot = commands.Bot(command_prefix="/", intents=intents)
tree = bot.tree

# Configuration is now imported from config.py
# You can edit ROLE_ODMENY, AUTA, CENY_ZBRANI, etc. in config.py
    # All configuration moved to config.py

# MongoDB connection setup
MONGO_URI = os.getenv("MONGO_URI")

if not MONGO_URI:
    raise ValueError("MONGO_URI environment variable is not set")

# Parse and properly encode MongoDB URI
def encode_mongo_uri(uri):
    """Properly encode username and password in MongoDB URI"""
    try:
        # Pattern to extract mongodb://username:password@host or mongodb+srv://username:password@host
        pattern = r'^(mongodb(?:\+srv)?://)([^:]+):([^@]+)@(.+)$'
        match = re.match(pattern, uri)

        if match:
            protocol, username, password, rest = match.groups()
            # URL encode username and password
            encoded_username = urllib.parse.quote_plus(username)
            encoded_password = urllib.parse.quote_plus(password)
            encoded_uri = f"{protocol}{encoded_username}:{encoded_password}@{rest}"
            print(f"üîß Encoded MongoDB URI (username: {username}, host: {rest.split('?')[0].split('/')[0]})")
            return encoded_uri
        else:
            # If no credentials in URI, return as is
            print(f"‚ö†Ô∏è Could not parse MongoDB URI pattern, using as-is")
            return uri
    except Exception as e:
        print(f"Warning: Could not parse MongoDB URI: {e}")
        return uri

MONGO_URI_ENCODED = encode_mongo_uri(MONGO_URI)

try:
    client = MongoClient(MONGO_URI_ENCODED, serverSelectionTimeoutMS=5000)
    client.admin.command('ping')
    print("‚úÖ Successfully connected to MongoDB!")
    db = client["miamirpbot"]
    hraci = db["hraci"]
except Exception as e:
    print(f"‚ùå MongoDB connection error: {e}")
    print("Please ensure your MONGO_URI is properly formatted.")
    print("Format: mongodb+srv://username:password@cluster.mongodb.net/database")
    raise

def get_or_create_user(user_id):
    user_id = str(user_id)
    user = hraci.find_one({"_id": user_id})

    if not user:
        new_user = {
            "_id": user_id,
            "auta": {},
            "zbrane": {},
            "penize": 0,
            "hotovost": 0,
            "bank": 0,
            "last_collect": None,
            "collect_timestamps": {},
            "veci": {},
            "drogy": {} # Inicializace drog
        }
        hraci.insert_one(new_user)
        return new_user

    update_fields = {}

    # Doplnƒõn√≠ chybƒõj√≠c√≠ch pol√≠
    for key, default in {
        "auta": {},
        "zbrane": {},
        "penize": 0,
        "hotovost": 0,
        "bank": 0,
        "veci": {},
        "collect_timestamps": {},
        "last_collect": None,
        "drogy": {} # Doplnƒõn√≠ drog
    }.items():
        if key not in user:
            update_fields[key] = default
            user[key] = default

    # Konverze star√Ωch seznam≈Ø na dict
    if isinstance(user.get("auta"), list):
        auta_dict = {}
        for auto in user["auta"]:
            auta_dict[auto] = auta_dict.get(auto, 0) + 1
        update_fields["auta"] = auta_dict
        user["auta"] = auta_dict

    if isinstance(user.get("zbrane"), list):
        zbrane_dict = {}
        for zbran in user["zbrane"]:
            zbrane_dict[zbran] = zbrane_dict.get(zbran, 0) + 1
        update_fields["zbrane"] = zbrane_dict
        user["zbrane"] = zbrane_dict

    # P≈ôepoƒç√≠t√°n√≠ penƒõz
    user["penize"] = user.get("hotovost", 0) + user.get("bank", 0)
    update_fields["penize"] = user["penize"]

    # Pokud byly zmƒõny, aktualizuj dokument v DB
    if update_fields:
        hraci.update_one({"_id": user_id}, {"$set": update_fields})

    return user
# üì¶ Seznam vƒõc√≠ pro autocomplete (z cen)
VECI_SEZNAM = list(CENY_VECI.keys())

# üìã Seznam drog (p≈ôizp≈Øsob podle sv√Ωch recept≈Ø)
DROGY_SEZNAM = ["Marihuana", "Kokain", "Metamfetamin", "Pervitin", "Ext√°ze", "Heroin"]

# Autocomplete pro vƒõci
async def autocomplete_veci(interaction: discord.Interaction, current: str):
    return [
        app_commands.Choice(name=vec, value=vec)
        for vec in VECI_SEZNAM if current.lower() in vec.lower()
    ][:25]

# Autocomplete pro drogy
async def autocomplete_drogy(interaction: discord.Interaction, current: str):
    return [
        app_commands.Choice(name=drug, value=drug)
        for drug in DROGY_SEZNAM if current.lower() in drug.lower()
    ][:25]

# Autocomplete pro vƒõci a drogy dohromady (pro prodej-veci)
async def autocomplete_veci_drogy(interaction: discord.Interaction, current: str):
    user_data = get_or_create_user(interaction.user.id)
    veci = user_data.get("veci", {})
    drogy = user_data.get("drogy", {})

    # Kombinuj vƒõci a drogy z invent√°≈ôe u≈æivatele
    dostupne_polozky = list(veci.keys()) + list(drogy.keys())

    return [
        app_commands.Choice(name=item, value=item)
        for item in dostupne_polozky if current.lower() in item.lower()
    ][:25]

async def log_action(bot, guild: discord.Guild, message: str):
    log_channel = guild.get_channel(LOG_CHANNEL_ID)
    if log_channel:
        embed = discord.Embed(
            description=message,
            color=discord.Color.blue(),
            timestamp=datetime.utcnow()
        )
        embed.set_footer(text="Bot Action Log")
        await log_channel.send(embed=embed)


class ConfirmationView(discord.ui.View):
    def __init__(self, prodavajici, kupec, item, item_type, cena):
        super().__init__(timeout=60.0)
        self.prodavajici = prodavajici
        self.kupec = kupec
        self.item = item
        self.item_type = item_type
        self.cena = cena
        self.result = None

    @discord.ui.button(label='‚úÖ Potvrdit n√°kup', style=discord.ButtonStyle.green)
    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.kupec.id:
            await interaction.response.send_message("‚ùå Pouze kupuj√≠c√≠ m≈Ø≈æe potvrdit n√°kup.", ephemeral=True)
            return

        self.result = True
        self.stop()
        await interaction.response.edit_message(content=f"‚úÖ {self.kupec.display_name} potvrdil n√°kup!", view=None)

    @discord.ui.button(label='‚ùå Zru≈°it', style=discord.ButtonStyle.red)
    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id not in [self.kupec.id, self.prodavajici.id]:
            await interaction.response.send_message("‚ùå Pouze kupuj√≠c√≠ nebo prod√°vaj√≠c√≠ m≈Ø≈æe zru≈°it obchod.", ephemeral=True)
            return

        self.result = False
        self.stop()
        await interaction.response.edit_message(content=f"‚ùå Obchod byl zru≈°en.", view=None)

    async def on_timeout(self):
        self.result = False



def get_total_money(data):
    return data.get("hotovost", 0) + data.get("bank", 0)


# === P≈òIPOJEN√ç ===


@bot.event
async def on_ready():
    await tree.sync()
    print(f"‚úÖ Bot je online jako {bot.user}")

# ===INVENTORY P≈ò√çKAZY ===

#pridej zbran command
@tree.command(name="pridej-zbran", description="P≈ôid√° zbra≈à hr√°ƒçi (admin)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu p≈ôid√°≈° zbra≈à",
                           zbran="Zbra≈à, kterou chce≈° p≈ôidat",
                           pocet="Poƒçet kus≈Ø")
async def pridej_zbran(interaction: discord.Interaction,
                           uzivatel: discord.Member,
                           zbran: str,
                           pocet: int = 1):
        if not any(role.id == ADMIN_ROLE_ID for role in interaction.user.roles):
            await interaction.response.send_message(
                "‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
            await log_action(bot, interaction.guild, f"‚ùå {interaction.user.mention} pokusil se pou≈æ√≠t /pridej-zbran bez opr√°vnƒõn√≠")
            return
        if zbran not in DOSTUPNE_ZBRANE:
            await interaction.response.send_message(
                f"‚ùå Zbra≈à `{zbran}` nen√≠ v seznamu dostupn√Ωch zbran√≠.",
                ephemeral=True)
            return
        data = get_or_create_user(uzivatel.id)
        if zbran in data["zbrane"]:
            data["zbrane"][zbran] += pocet
        else:
            data["zbrane"][zbran] = pocet
        hraci.update_one({"_id": str(uzivatel.id)}, {"$set": data})

        await interaction.response.send_message(
            f"‚úÖ P≈ôid√°no {pocet}x `{zbran}` hr√°ƒçi {uzivatel.display_name}.")
        await log_action(bot, interaction.guild, f"{interaction.user.mention} p≈ôidal {pocet}x {zbran} hr√°ƒçi {uzivatel.mention}")




@pridej_zbran.autocomplete("zbran")
async def autocomplete_zbran_pridat(interaction: discord.Interaction,
                                        current: str):
        return [
            app_commands.Choice(name=z, value=z) for z in DOSTUPNE_ZBRANE
            if current.lower() in z.lower()
        ][:25]
#odeber zbran command
@tree.command(name="odeber-zbran", description="Odebere zbra≈à hr√°ƒçi (admin)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu odebere≈° zbra≈à",
                           zbran="Zbra≈à, kterou chce≈° odebrat",
                           pocet="Poƒçet kus≈Ø")
async def odeber_zbran(interaction: discord.Interaction,
                           uzivatel: discord.Member,
                           zbran: str,
                           pocet: int = 1):
        if not any(role.id == ADMIN_ROLE_ID for role in interaction.user.roles):
            await interaction.response.send_message(
                "‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
            await log_action(bot, interaction.guild, f"‚ùå {interaction.user.mention} pokusil se pou≈æ√≠t /odeber-zbran bez opr√°vnƒõn√≠")
            return
        data = get_or_create_user(uzivatel.id)
        if zbran in data["zbrane"]:
            data["zbrane"][zbran] -= pocet
            if data["zbrane"][zbran] <= 0:
                del data["zbrane"][zbran]
            hraci.update_one({"_id": str(uzivatel.id)}, {"$set": data})

            await interaction.response.send_message(
                f"‚úÖ Odebr√°no {pocet}x `{zbran}` hr√°ƒçi {uzivatel.display_name}."
            )
            await log_action(bot, interaction.guild, f"{interaction.user.mention} odebral {pocet}x {zbran} hr√°ƒçi {uzivatel.mention}")
        else:
            await interaction.response.send_message(
                f"‚ùå Zbra≈à `{zbran}` nebyla nalezena u {uzivatel.display_name}."
            )

@odeber_zbran.autocomplete("zbran")
async def autocomplete_zbran_odebrat(interaction: discord.Interaction,
                                         current: str):
        uzivatel = interaction.namespace.uzivatel
        if not uzivatel:
            return []
        data = get_or_create_user(uzivatel.id)
        return [
            app_commands.Choice(name=z, value=z) for z in data["zbrane"]
            if current.lower() in z.lower()
        ][:25]

    # Pridej auto command
@tree.command(name="pridej-auto", description="P≈ôid√° auto hr√°ƒçi (admin)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu p≈ôid√°≈° auto",
                           auto="Auto, kter√© chce≈° p≈ôidat",
                           pocet="Poƒçet kus≈Ø")
async def pridej_auto(interaction: discord.Interaction,
                          uzivatel: discord.Member,
                          auto: str,
                          pocet: int = 1):
        if not any(role.id == ADMIN_ROLE_ID for role in interaction.user.roles):
            await interaction.response.send_message(
                "‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
            await log_action(bot, interaction.guild, f"‚ùå {interaction.user.mention} pokusil se pou≈æ√≠t /pridej-auto bez opr√°vnƒõn√≠")
            return
        if auto not in DOSTUPNA_AUTA:
            await interaction.response.send_message(
                f"‚ùå Auto `{auto}` nen√≠ v seznamu dostupn√Ωch aut.", ephemeral=True)
            return
        data = get_or_create_user(uzivatel.id)
        if auto in data["auta"]:
            data["auta"][auto] += pocet
        else:
            data["auta"][auto] = pocet
        hraci.update_one({"_id": str(uzivatel.id)}, {"$set": data})

        await interaction.response.send_message(
            f"‚úÖ P≈ôid√°no {pocet}x `{auto}` hr√°ƒçi {uzivatel.display_name}.")
        await log_action(bot, interaction.guild, f"{interaction.user.mention} p≈ôidal {pocet}x {auto} hr√°ƒçi {uzivatel.mention}")

@pridej_auto.autocomplete("auto")
async def autocomplete_auto_pridat(interaction: discord.Interaction,
                                       current: str):
        return [
            app_commands.Choice(name=a, value=a) for a in DOSTUPNA_AUTA
            if current.lower() in a.lower()
        ][:25]

    # Odeber auto command
@tree.command(name="odeber-auto", description="Odebere auto hr√°ƒçi (admin)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu odebere≈° auto",
                           auto="Auto, kter√© chce≈° odebrat",
                           pocet="Poƒçet kus≈Ø")
async def odeber_auto(interaction: discord.Interaction,
                          uzivatel: discord.Member,
                          auto: str,
                          pocet: int = 1):
        if not any(role.id == ADMIN_ROLE_ID for role in interaction.user.roles):
            await interaction.response.send_message(
                "‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
            await log_action(bot, interaction.guild, f"‚ùå {interaction.user.mention} pokusil se pou≈æ√≠t /odeber-auto bez opr√°vnƒõn√≠")
            return
        data = get_or_create_user(uzivatel.id)
        if auto in data["auta"]:
            data["auta"][auto] -= pocet
            if data["auta"][auto] <= 0:
                del data["auta"][auto]
            hraci.update_one({"_id": str(uzivatel.id)}, {"$set": data})

            await interaction.response.send_message(
                f"‚úÖ Odebr√°no {pocet}x `{auto}` hr√°ƒçi {uzivatel.display_name}.")
            await log_action(bot, interaction.guild, f"{interaction.user.mention} odebral {pocet}x {auto} hr√°ƒçi {uzivatel.mention}")
        else:
            await interaction.response.send_message(
                f"‚ùå Auto `{auto}` nebylo nalezeno u {uzivatel.display_name}.")

@odeber_auto.autocomplete("auto")
async def autocomplete_auto_odebrat(interaction: discord.Interaction,
                                        current: str):
        uzivatel = interaction.namespace.uzivatel
        if not uzivatel:
            return []
        data = get_or_create_user(uzivatel.id)
        return [
            app_commands.Choice(name=a, value=a) for a in data["auta"]
            if current.lower() in a.lower()
        ][:25]

    # Inventory command
@tree.command(name="inventory", description="Zobraz√≠ invent√°≈ô hr√°ƒçe")
@app_commands.describe(uzivatel="U≈æivatel, jeho≈æ invent√°≈ô chce≈° zobrazit")
async def inventory(interaction: discord.Interaction, uzivatel: discord.Member = None):
        uzivatel = uzivatel or interaction.user
        data = get_or_create_user(uzivatel.id)

        auta = data.get("auta", {})
        zbrane = data.get("zbrane", {})
        veci = data.get("veci", {})
        drogy = data.get("drogy", {})

        auta_text = "\n".join(f"üöó {auto} √ó{pocet}" for auto, pocet in auta.items()) or "≈Ω√°dn√°"
        zbrane_text = "\n".join(f"üî´ {zbran} √ó{pocet}" for zbran, pocet in zbrane.items()) or "≈Ω√°dn√©"
        veci_text = "\n".join(f"üì¶ {nazev} √ó{pocet}" for nazev, pocet in veci.items()) or "≈Ω√°dn√©"
        drogy_text = "\n".join(f"üíä {nazev} √ó{gramy:.2f}g" for nazev, gramy in drogy.items()) # Form√°tov√°n√≠ na 2 desetinn√° m√≠sta

        embed = discord.Embed(
            title=f"üìã Invent√°≈ô u≈æivatele {uzivatel.display_name}",
            color=discord.Color.blue()
        )
        embed.add_field(name="Auta", value=auta_text, inline=False)
        embed.add_field(name="Zbranƒõ", value=zbrane_text, inline=False)
        embed.add_field(name="Vƒõci", value=veci_text, inline=False)

        if drogy:  # ‚úÖ P≈ôid√° se pouze pokud nƒõjak√© drogy existuj√≠
            embed.add_field(name="Drogy", value=drogy_text, inline=False)

        await interaction.response.send_message(embed=embed)


# Reset inventory command
@tree.command(name="reset-inventory", description="Resetuje cel√Ω invent√°≈ô hr√°ƒçe (admin)")
@app_commands.describe(uzivatel="U≈æivatel, jeho≈æ invent√°≈ô chce≈° vymazat")
async def reset_inventory(interaction: discord.Interaction, uzivatel: discord.Member):
        if not any(role.id == ADMIN_ROLE_ID for role in interaction.user.roles):
            await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
            return
        data = get_or_create_user(uzivatel.id)
        data["auta"] = {}
        data["zbrane"] = {}
        data["veci"] = {}
        data["drogy"] = {}
        hraci.update_one({"_id": str(uzivatel.id)}, {"$set": data})

        await interaction.response.send_message(f"‚ôªÔ∏è Invent√°≈ô hr√°ƒçe {uzivatel.display_name} byl √∫spƒõ≈°nƒõ resetov√°n.")
        await log_action(bot, interaction.guild, f"{interaction.user.mention} resetoval invent√°≈ô hr√°ƒçe {uzivatel.mention}")


# === P≈ò√çKAZY NA PEN√çZE ===


# Balance command

@tree.command(name="balance", description="Zobraz√≠ finanƒçn√≠ stav")
@app_commands.describe(uzivatel="(Voliteln√©) U≈æivatel, jeho≈æ stav chce≈° zobrazit")
async def balance(interaction: discord.Interaction, uzivatel: discord.Member = None):
    uzivatel = uzivatel or interaction.user
    data = get_or_create_user(uzivatel.id)

    penize = data.get("penize", 0)
    hotovost = data.get("hotovost", 0)
    bank = data.get("bank", 0)

    embed = discord.Embed(
        title=f"üí∞ Finanƒçn√≠ p≈ôehled pro {uzivatel.display_name}",
        color=discord.Color.gold()
    )
    embed.add_field(name="üíµ Celkem", value=f"{penize:,} $", inline=False)
    embed.add_field(name="üí≥ Hotovost", value=f"{hotovost:,} $", inline=True)
    embed.add_field(name="üè¶ Banka", value=f"{bank:,} $", inline=True)

    await interaction.response.send_message(embed=embed)

# Pridej penize command
@tree.command(name="pridej-penize", description="P≈ôid√° pen√≠ze hr√°ƒçi (admin)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu chce≈° p≈ôidat pen√≠ze", castka="Kolik penƒõz chce≈° p≈ôidat")
async def pridej_penize(interaction: discord.Interaction, uzivatel: discord.Member, castka: int):
    if not any(role.id == ADMIN_ROLE_ID for role in interaction.user.roles):
        await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        await log_action(bot, interaction.guild, f"‚ùå {interaction.user.mention} pokusil se pou≈æ√≠t /pridej-penize bez opr√°vnƒõn√≠")
        return
    data = get_or_create_user(uzivatel.id)
    data["hotovost"] += castka # Automatically adds to hotovost
    data["penize"] = data["hotovost"] + data["bank"]  # Update total money
    hraci.update_one({"_id": str(uzivatel.id)}, {"$set": data})

    await interaction.response.send_message(f"‚úÖ P≈ôid√°no {castka}$ hr√°ƒçi {uzivatel.display_name}.")
    await log_action(bot, interaction.guild, f"{interaction.user.mention} p≈ôidal {castka}$ hr√°ƒçi {uzivatel.mention}")

# Odeber penize command
@tree.command(name="odeber-penize", description="Odebere pen√≠ze hr√°ƒçi (admin)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu chce≈° odebrat pen√≠ze", castka="Kolik penƒõz chce≈° odebrat (nebo 'all' pro v≈°echny)")
async def odeber_penize(interaction: discord.Interaction, uzivatel: discord.Member, castka: str):
    if not any(role.id == ADMIN_ROLE_ID for role in interaction.user.roles):
        await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        await log_action(bot, interaction.guild, f"‚ùå {interaction.user.mention} pokusil se pou≈æ√≠t /odeber-penize bez opr√°vnƒõn√≠")
        return
    data = get_or_create_user(uzivatel.id)

    if castka.lower() == "all":
        actual_castka = data["hotovost"] + data["bank"]
        data["hotovost"] = 0
        data["bank"] = 0
    else:
        try:
            actual_castka = int(castka)
            if actual_castka <= 0:
                await interaction.response.send_message("‚ùå ƒå√°stka mus√≠ b√Ωt vƒõt≈°√≠ ne≈æ 0.", ephemeral=True)
                return
        except ValueError:
            await interaction.response.send_message("‚ùå Neplatn√° ƒç√°stka. Pou≈æij ƒç√≠slo nebo 'all'.", ephemeral=True)
            return

        # Remove from hotovost first, then bank
        if data["hotovost"] >= actual_castka:
            data["hotovost"] -= actual_castka
        else:
            remaining = actual_castka - data["hotovost"]
            data["hotovost"] = 0
            data["bank"] -= remaining
            if data["bank"] < 0:
                data["bank"] = 0

    data["penize"] = data["hotovost"] + data["bank"]
    hraci.update_one({"_id": str(uzivatel.id)}, {"$set": data})

    await interaction.response.send_message(f"‚úÖ Odebr√°no {actual_castka}$ hr√°ƒçi {uzivatel.display_name}.")
    await log_action(bot, interaction.guild, f"{interaction.user.mention} odebral {actual_castka}$ hr√°ƒçi {uzivatel.mention}")

# Reset penize command

@tree.command(name="reset-penize", description="Resetuje pen√≠ze hr√°ƒçe (admin)")
@app_commands.describe(uzivatel="U≈æivatel, jeho≈æ pen√≠ze chce≈° vynulovat")
async def reset_penize(interaction: discord.Interaction, uzivatel: discord.Member):
        if not any(role.id == ADMIN_ROLE_ID for role in interaction.user.roles):
            await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
            await log_action(bot, interaction.guild, f"‚ùå {interaction.user.mention} pokusil se pou≈æ√≠t /reset-penize bez opr√°vnƒõn√≠")
            return
        data = get_or_create_user(uzivatel.id)
        data["hotovost"] = 0
        data["bank"] = 0
        data["penize"] = 0
        hraci.update_one({"_id": str(uzivatel.id)}, {"$set": data})

        await interaction.response.send_message(f"‚ôªÔ∏è Pen√≠ze hr√°ƒçe {uzivatel.display_name} byly vynulov√°ny.")
        await log_action(bot, interaction.guild, f"{interaction.user.mention} resetoval pen√≠ze hr√°ƒçe {uzivatel.mention}")

# Pay command

@tree.command(name="pay", description="Po≈°le pen√≠ze jin√©mu hr√°ƒçi")
@app_commands.describe(cil="Komu chce≈° poslat pen√≠ze", castka="Kolik penƒõz chce≈° poslat")
async def posli_penize(interaction: discord.Interaction, cil: discord.Member, castka: int):
    if castka <= 0:
        await interaction.response.send_message("‚ùå ƒå√°stka mus√≠ b√Ωt vƒõt≈°√≠ ne≈æ 0.", ephemeral=True)
        return
    odesilatel_data = get_or_create_user(interaction.user.id)
    prijemce_data = get_or_create_user(cil.id)

    total_money_odesilatel = get_total_money(odesilatel_data)
    if total_money_odesilatel < castka:
        await interaction.response.send_message("‚ùå Nem√°≈° dostatek penƒõz.", ephemeral=True)
        return

    # Remove money from sender (hotovost first, then bank)
    remaining_to_remove = castka
    if odesilatel_data["hotovost"] >= remaining_to_remove:
        odesilatel_data["hotovost"] -= remaining_to_remove
    else:
        remaining_to_remove -= odesilatel_data["hotovost"]
        odesilatel_data["hotovost"] = 0
        odesilatel_data["bank"] -= remaining_to_remove

    # Add money to receiver's hotovost
    prijemce_data["hotovost"] += castka

    # Update total money for both users
    odesilatel_data["penize"] = odesilatel_data["hotovost"] + odesilatel_data["bank"]
    prijemce_data["penize"] = prijemce_data["hotovost"] + prijemce_data["bank"]

    hraci.update_one({"_id": str(interaction.user.id)}, {"$set": odesilatel_data})
    hraci.update_one({"_id": str(cil.id)}, {"$set": prijemce_data})

    await interaction.response.send_message(f"üí∏ Poslal jsi {castka}$ hr√°ƒçi {cil.display_name}.")
    await log_action(bot, interaction.guild, f"{interaction.user.mention} poslal {castka}$ hr√°ƒçi {cil.mention}")
# Kup auto command

@tree.command(name="koupit-auto", description="Koup√≠ auto, pokud m√°≈° dost penƒõz a p≈ô√≠padnou roli")
@app_commands.describe(auto="Auto, kter√© chce≈° koupit")
async def koupit_auto(interaction: discord.Interaction, auto: str):
    user = interaction.user
    data = get_or_create_user(user.id)

    if auto not in AUTA:
        await interaction.response.send_message("‚ùå Takov√© auto neexistuje.", ephemeral=True)
        return

    info = AUTA[auto]
    cena = info["cena"]
    pozadovana_role = info["role"]

    # Check if specific role is required and user has it
    if pozadovana_role:
        required_role_ids = [int(role_id.strip()) for role_id in pozadovana_role.split("||")]
        user_role_ids = [role.id for role in user.roles]

        if not any(role_id in user_role_ids for role_id in required_role_ids):
            await interaction.response.send_message(
                f"‚ùå Toto auto vy≈æaduje specifickou roli.", ephemeral=True)
            return

    total_money = get_total_money(data)
    if total_money < cena:
        await interaction.response.send_message("‚ùå Nem√°≈° dostatek penƒõz.", ephemeral=True)
        return

    # Remove money from user (hotovost first, then bank)
    remaining_to_remove = cena
    if data["hotovost"] >= remaining_to_remove:
        data["hotovost"] -= remaining_to_remove
    else:
        remaining_to_remove -= data["hotovost"]
        data["hotovost"] = 0
        data["bank"] -= remaining_to_remove

    # Add car to inventory
    if auto in data["auta"]:
        data["auta"][auto] += 1
    else:
        data["auta"][auto] = 1

    # Update total money
    data["penize"] = data["hotovost"] + data["bank"]
    hraci.update_one({"_id": str(user.id)}, {"$set": data})


    await interaction.response.send_message(
        f"‚úÖ √öspƒõ≈°nƒõ jsi koupil **{auto}** za **{cena:,} $**."
    )
    await log_action(bot, interaction.guild, f"{user.mention} koupil {auto} za {cena:,}$")

@koupit_auto.autocomplete("auto")
async def autocomplete_kup_auto(interaction: discord.Interaction, current: str):
    return [
        app_commands.Choice(name=a, value=a)
        for a in AUTA.keys() if current.lower() in a.lower()
    ][:25]

# Kup zbran command

@tree.command(name="koupit-zbran", description="Koupit zbra≈à z nab√≠dky")
@app_commands.describe(zbran="Zbra≈à, kterou chce≈° koupit", pocet="Poƒçet kus≈Ø")
async def koupit_zbran(interaction: discord.Interaction, zbran: str, pocet: int = 1):
    role_id = 1293617188988784667  # Zmƒõ≈à na ID role, kter√° m√° povolen√Ω n√°kup zbran√≠
    if not any(role.id == role_id for role in interaction.user.roles):
        await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ koupit zbranƒõ.", ephemeral=True)
        return

    uzivatel = interaction.user
    data = get_or_create_user(uzivatel.id)

    if zbran not in CENY_ZBRANI:
        await interaction.response.send_message(f"‚ùå Zbra≈à `{zbran}` nen√≠ v nab√≠dce k prodeji.", ephemeral=True)
        return

    cena_za_kus = CENY_ZBRANI[zbran]
    celkova_cena = cena_za_kus * pocet

    total_money = get_total_money(data)
    if total_money < celkova_cena:
        await interaction.response.send_message(
            f"‚ùå Nem√°≈° dostatek penƒõz ({total_money:,}$) na koupi {pocet}x `{zbran}` (pot≈ôebuje≈° {celkova_cena:,}$).",
            ephemeral=True
        )
        return
    # Remove money from buyer (hotovost first, then bank)
    remaining_to_remove = celkova_cena
    if data["hotovost"] >= remaining_to_remove:
        data["hotovost"] -= remaining_to_remove
    else:
        remaining_to_remove -= data["hotovost"]
        data["hotovost"] = 0
        data["bank"] -= remaining_to_remove

    data["penize"] = data["hotovost"] + data["bank"]

    # P≈ôidej zbra≈à
    if zbran in data["zbrane"]:
        data["zbrane"][zbran] += pocet
    else:
        data["zbrane"][zbran] = pocet
    hraci.update_one({"_id": str(uzivatel.id)}, {"$set": data})


    await interaction.response.send_message(f"‚úÖ Koupil jsi {pocet}x `{zbran}` za {celkova_cena:,}$. Z≈Østatek: {data['penize']:,}$.")
    await log_action(bot, interaction.guild, f"{uzivatel.mention} koupil {pocet}x {zbran} za {celkova_cena:,}$")

@koupit_zbran.autocomplete("zbran")
async def autocomplete_koupit_zbran(interaction: discord.Interaction, current: str):
    return [app_commands.Choice(name=z, value=z) for z in CENY_ZBRANI if current.lower() in z.lower()][:25]

@tree.command(name="prodej-auto", description="Prod√° auto jin√©mu hr√°ƒçi")
@app_commands.describe(kupec="Komu prod√°v√°≈° auto", auto="Jak√© auto prod√°v√°≈°", cena="Cena za auto")
async def prodej_auto(interaction: discord.Interaction, kupec: discord.Member, auto: str, cena: int):
    prodavajici_data = get_or_create_user(interaction.user.id)
    kupec_data = get_or_create_user(kupec.id)

    if auto not in prodavajici_data["auta"]:
        await interaction.response.send_message("‚ùå Nem√°≈° toto auto v invent√°≈ôi.", ephemeral=True)
        return
    if prodavajici_data["auta"][auto] <= 0:
        await interaction.response.send_message("‚ùå Nem√°≈° ≈æ√°dn√© kusy tohoto auta.", ephemeral=True)
        return
    total_money_kupec = get_total_money(kupec_data)
    if total_money_kupec < cena:
        await interaction.response.send_message("‚ùå Kupuj√≠c√≠ nem√° dostatek penƒõz.", ephemeral=True)
        return

    # Create confirmation view
    view = ConfirmationView(interaction.user, kupec, auto, "auto", cena)

    embed = discord.Embed(
        title="üöó Potvrzen√≠ n√°kupu auta",
        description=f"**Prod√°vaj√≠c√≠:** {interaction.user.display_name}\n**Kupuj√≠c√≠:** {kupec.display_name}\n**Auto:** {auto}\n**Cena:** {cena:,}$",
        color=discord.Color.orange()
    )
    embed.add_field(name="‚è∞ ƒåek√°m na potvrzen√≠", value=f"{kupec.mention}, potvrƒè pros√≠m n√°kup kliknut√≠m na tlaƒç√≠tko n√≠≈æe.", inline=False)

    await interaction.response.send_message(embed=embed, view=view)

    # Wait for confirmation
    await view.wait()

    if view.result is True:
        # Proceed with the sale
        prodavajici_data["auta"][auto] -= 1
        if prodavajici_data["auta"][auto] == 0:
            del prodavajici_data["auta"][auto]
        kupec_data["auta"][auto] = kupec_data["auta"].get(auto, 0) + 1

        # Remove money from buyer (hotovost first, then bank)
        remaining_to_remove = cena
        if kupec_data["hotovost"] >= remaining_to_remove:
            kupec_data["hotovost"] -= remaining_to_remove
        else:
            remaining_to_remove -= kupec_data["hotovost"]
            kupec_data["hotovost"] = 0
            kupec_data["bank"] -= remaining_to_remove

        # Add money to seller's hotovost
        prodavajici_data["hotovost"] += cena

        # Update total money
        kupec_data["penize"] = kupec_data["hotovost"] + kupec_data["bank"]
        prodavajici_data["penize"] = prodavajici_data["hotovost"] + prodavajici_data["bank"]

        # Save to database
        hraci.update_one({"_id": str(kupec.id)}, {"$set": kupec_data})
        hraci.update_one({"_id": str(interaction.user.id)}, {"$set": prodavajici_data})

        success_embed = discord.Embed(
            title="‚úÖ Obchod dokonƒçen!",
            description=f"Auto `{auto}` bylo √∫spƒõ≈°nƒõ prod√°no {kupec.display_name} za {cena:,}$.",
            color=discord.Color.green()
        )
        await interaction.followup.send(embed=success_embed)
        await log_action(bot, interaction.guild, f"{interaction.user.mention} prodal {auto} hr√°ƒçi {kupec.mention} za {cena:,}$")
    elif view.result is False:
        fail_embed = discord.Embed(
            title="‚ùå Obchod zru≈°en",
            description="Obchod byl zru≈°en nebo vypr≈°el ƒças na potvrzen√≠.",
            color=discord.Color.red()
        )
        await interaction.followup.send(embed=fail_embed)

@prodej_auto.autocomplete("auto")
async def autocomplete_prodej_auto(interaction: discord.Interaction, current: str):
    data = get_or_create_user(interaction.user.id)
    auta = data.get("auta", {})
    return [app_commands.Choice(name=a, value=a) for a in auta if current.lower() in a.lower()][:25]

@tree.command(name="prodej-zbran", description="Prod√° zbra≈à jin√©mu hr√°ƒçi")
@app_commands.describe(kupec="Komu prod√°v√°≈° zbra≈à", zbran="Jakou zbra≈à prod√°v√°≈°", cena="Cena za zbra≈à")
async def prodej_zbran(interaction: discord.Interaction, kupec: discord.Member, zbran: str, cena: int):
    prodavajici_data = get_or_create_user(interaction.user.id)
    kupec_data = get_or_create_user(kupec.id)

    if zbran not in prodavajici_data["zbrane"]:
        await interaction.response.send_message("‚ùå Nem√°≈° tuto zbra≈à v invent√°≈ôi.", ephemeral=True)
        return
    if prodavajici_data["zbrane"][zbran] <= 0:
        await interaction.response.send_message("‚ùå Nem√°≈° ≈æ√°dn√© kusy t√©to zbranƒõ.", ephemeral=True)
        return
    total_money_kupec = get_total_money(kupec_data)
    if total_money_kupec < cena:
        await interaction.response.send_message("‚ùå Kupuj√≠c√≠ nem√° dostatek penƒõz.", ephemeral=True)
        return

    # Create confirmation view
    view = ConfirmationView(interaction.user, kupec, zbran, "zbran", cena)

    embed = discord.Embed(
        title="üî´ Potvrzen√≠ n√°kupu zbranƒõ",
        description=f"**Prod√°vaj√≠c√≠:** {interaction.user.display_name}\n**Kupuj√≠c√≠:** {kupec.display_name}\n**Zbra≈à:** {zbran}\n**Cena:** {cena:,}$",
        color=discord.Color.orange()
    )
    embed.add_field(name="‚è∞ ƒåek√°m na potvrzen√≠", value=f"{kupec.mention}, potvrƒè pros√≠m n√°kup kliknut√≠m na tlaƒç√≠tko n√≠≈æe.", inline=False)

    await interaction.response.send_message(embed=embed, view=view)

    # Wait for confirmation
    await view.wait()

    if view.result is True:
        # Proceed with the sale
        prodavajici_data["zbrane"][zbran] -= 1
        if prodavajici_data["zbrane"][zbran] == 0:
            del prodavajici_data["zbrane"][zbran]
        kupec_data["zbrane"][zbran] = kupec_data["zbrane"].get(zbran, 0) + 1

        # Remove money from buyer (hotovost first, then bank)
        remaining_to_remove = cena
        if kupec_data["hotovost"] >= remaining_to_remove:
            kupec_data["hotovost"] -= remaining_to_remove
        else:
            remaining_to_remove -= kupec_data["hotovost"]
            kupec_data["hotovost"] = 0
            kupec_data["bank"] -= remaining_to_remove

        # Add money to seller's hotovost
        prodavajici_data["hotovost"] += cena

        # Update total money
        kupec_data["penize"] = kupec_data["hotovost"] + kupec_data["bank"]
        prodavajici_data["penize"] = prodavajici_data["hotovost"] + prodavajici_data["bank"]

        # Save to database
        hraci.update_one({"_id": str(kupec.id)}, {"$set": kupec_data})
        hraci.update_one({"_id": str(interaction.user.id)}, {"$set": prodavajici_data})


        success_embed = discord.Embed(
            title="‚úÖ Obchod dokonƒçen!",
            description=f"Zbra≈à `{zbran}` byla √∫spƒõ≈°nƒõ prod√°na {kupec.display_name} za {cena:,}$.",
            color=discord.Color.green()
        )
        await interaction.followup.send(embed=success_embed)
        await log_action(bot, interaction.guild, f"{interaction.user.mention} prodal {zbran} hr√°ƒçi {kupec.mention} za {cena:,}$")
    elif view.result is False:
        fail_embed = discord.Embed(
            title="‚ùå Obchod zru≈°en",
            description="Obchod byl zru≈°en nebo vypr≈°el ƒças na potvrzen√≠.",
            color=discord.Color.red()
        )
        await interaction.followup.send(embed=fail_embed)

@prodej_zbran.autocomplete("zbran")
async def autocomplete_prodej_zbran(interaction: discord.Interaction, current: str):
    data = get_or_create_user(interaction.user.id)
    zbrane = data.get("zbrane", {})
    return [app_commands.Choice(name=z, value=z) for z in zbrane if current.lower() in z.lower()][:25]

@tree.command(name="vybrat", description="Vybere pen√≠ze z banky do penƒõ≈æenky")
@app_commands.describe(castka="ƒå√°stka, kterou chce≈° vybrat (nebo 'all' pro v≈°echny)")
async def vybrat(interaction: discord.Interaction, castka: str):
    data = get_or_create_user(interaction.user.id)

    if castka.lower() == "all":
        actual_castka = data.get("bank", 0)
        if actual_castka <= 0:
            await interaction.response.send_message("‚ùå Nem√°≈° ≈æ√°dn√© pen√≠ze v bance.", ephemeral=True)
            return
        data["bank"] = 0
        data["hotovost"] += actual_castka
    else:
        try:
            actual_castka = int(castka)
            if actual_castka <= 0:
                await interaction.response.send_message("‚ùå ƒå√°stka mus√≠ b√Ωt vƒõt≈°√≠ ne≈æ 0.", ephemeral=True)
                return
        except ValueError:
            await interaction.response.send_message("‚ùå Neplatn√° ƒç√°stka. Pou≈æij ƒç√≠slo nebo 'all'.", ephemeral=True)
            return

        if data["bank"] < actual_castka:
            await interaction.response.send_message("‚ùå Nem√°≈° dostatek penƒõz v bance.", ephemeral=True)
            return

        data["bank"] -= actual_castka
        data["hotovost"] += actual_castka

    data["penize"] = data["hotovost"] + data["bank"]
    hraci.update_one({"_id": str(interaction.user.id)}, {"$set": data})


    await interaction.response.send_message(f"‚úÖ Vybral jsi {actual_castka:,}$ z banky.")


@tree.command(name="vlozit", description="Vlo≈æ√≠ pen√≠ze z penƒõ≈æenky do banky")
@app_commands.describe(castka="ƒå√°stka, kterou chce≈° vlo≈æit (nebo 'all' pro v≈°echny)")
async def vlozit(interaction: discord.Interaction, castka: str):
    data = get_or_create_user(interaction.user.id)

    if castka.lower() == "all":
        actual_castka = data.get("hotovost", 0)
        if actual_castka <= 0:
            await interaction.response.send_message("‚ùå Nem√°≈° ≈æ√°dn√© pen√≠ze v penƒõ≈æence.", ephemeral=True)
            return
        data["hotovost"] = 0
        data["bank"] += actual_castka
    else:
        try:
            actual_castka = int(castka)
            if actual_castka <= 0:
                await interaction.response.send_message("‚ùå ƒå√°stka mus√≠ b√Ωt vƒõt≈°√≠ ne≈æ 0.", ephemeral=True)
                return
        except ValueError:
            await interaction.response.send_message("‚ùå Neplatn√° ƒç√°stka. Pou≈æij ƒç√≠slo nebo 'all'.", ephemeral=True)
            return

        if data.get("hotovost", 0) < actual_castka:
            await interaction.response.send_message("‚ùå Nem√°≈° dostatek penƒõz v penƒõ≈æence.", ephemeral=True)
            return

        data["hotovost"] -= actual_castka
        data["bank"] += actual_castka

    data["penize"] = data["hotovost"] + data["bank"]
    hraci.update_one({"_id": str(interaction.user.id)}, {"$set": data})


    await interaction.response.send_message(f"‚úÖ Vlo≈æil jsi {actual_castka:,} $ z penƒõ≈æenky do banky.")

@tree.command(name="collect", description="Vybere≈° si t√Ωdenn√≠ v√Ωplatu podle sv√Ωch rol√≠ (ka≈æd√° m√° vlastn√≠ cooldown).")
async def collect(interaction: discord.Interaction):
    now = datetime.utcnow()
    data = get_or_create_user(interaction.user.id)

    if "collect_timestamps" not in data:
        data["collect_timestamps"] = {}

    user_role_ids = [role.id for role in interaction.user.roles]

    vyplaceno = 0
    vyplacene_role = []
    cekajici_role = []

    for role_id, castka in ROLE_ODMENY.items():
        if role_id not in user_role_ids:
            continue

        posledni = data["collect_timestamps"].get(str(role_id))
        if posledni:
            posledni_cas = datetime.fromisoformat(posledni)
            rozdil = now - posledni_cas
            if rozdil < timedelta(days=7):
                zb√Ωv√° = timedelta(days=7) - rozdil
                hodiny, zbytek = divmod(zb√Ωv√°.total_seconds(), 3600)
                minuty = int((zbytek % 3600) // 60)
                cekajici_role.append((role_id, hodiny, minuty))
                continue

        vyplaceno += castka
        vyplacene_role.append((role_id, castka))
        data["collect_timestamps"][str(role_id)] = now.isoformat()

    data["hotovost"] = data.get("hotovost", 0) + vyplaceno
    data["penize"] = data["hotovost"] + data.get("bank", 0) # Aktualizace celkov√Ωch penƒõz
    hraci.update_one({"_id": str(interaction.user.id)}, {"$set": data})


    embed = discord.Embed(
        title="üí∞ T√Ωdenn√≠ v√Ωplata",
        color=discord.Color.green()
    )
    if vyplacene_role:
        popis = ""
        for role_id, castka in vyplacene_role:
            role_obj = discord.utils.get(interaction.guild.roles, id=role_id)
            nazev = role_obj.name if role_obj else f"Role ID {role_id}"
            popis += f"‚úÖ **{nazev}**: +{castka:,} $\n"
        embed.add_field(name="üí∏ Vyplaceno", value=popis, inline=False)

    if cekajici_role:
        cekani = ""
        for role_id, h, m in cekajici_role:
            role_obj = discord.utils.get(interaction.guild.roles, id=role_id)
            nazev = role_obj.name if role_obj else f"Role ID {role_id}"
            cekani += f"‚è≥ **{nazev}** ‚Äì za {int(h)}h {int(m)}m\n"
        embed.add_field(name="<!--- Timer --->", value=cekani, inline=False)

    if not vyplacene_role and not cekajici_role:
        embed.description = "‚ÑπÔ∏è Nem√°≈° ≈æ√°dn√© role s t√Ωdenn√≠ v√Ωplatou."
    elif not vyplacene_role and cekajici_role:
         embed.description = "‚ùå Tento t√Ωden sis u≈æ vybral odmƒõnu za v≈°echny sv√© role."


    await interaction.response.send_message(embed=embed, ephemeral=True)
@tree.command(name="leaderboard", description="Zobraz√≠ ≈æeb≈ô√≠ƒçek nejbohat≈°√≠ch hr√°ƒç≈Ø")
@app_commands.describe(stranka="ƒå√≠slo str√°nky leaderboardu")
async def leaderboard(interaction: discord.Interaction, stranka: int = 1):
    all_users = list(hraci.find())

    if not all_users:
        await interaction.response.send_message("‚ùå ≈Ω√°dn√° data k zobrazen√≠.", ephemeral=True)
        return

    leaderboard_data = []
    for user in all_users:
        user_id = str(user["_id"])  # Keep as string, MongoDB stores as string
        total = user.get("hotovost", 0) + user.get("bank", 0)
        leaderboard_data.append((user_id, total))

    leaderboard_data.sort(key=lambda x: x[1], reverse=True)

    stranka -= 1
    zaznamu_na_stranku = 10
    zacatek = stranka * zaznamu_na_stranku
    konec = zacatek + zaznamu_na_stranku
    strankovany = leaderboard_data[zacatek:konec]

    if not strankovany:
        await interaction.response.send_message("‚ùå Tato str√°nka neexistuje.", ephemeral=True)
        return

    embed = discord.Embed(
        title="üí∞ Leaderboard ‚Äì Nejbohat≈°√≠ hr√°ƒçi",
        description=f"Str√°nka {stranka + 1}/{(len(leaderboard_data) + 9) // 10}",
        color=discord.Color.gold()
    )

    for index, (user_id, total) in enumerate(strankovany, start=zacatek + 1):
        user = interaction.guild.get_member(int(user_id))  # Convert to int for Discord API
        jmeno = user.display_name if user else f"<@{user_id}>"
        embed.add_field(
            name=f"#{index} ‚Äì {jmeno}",
            value=f"üíµ {total:,} $",
            inline=False
        )

    await interaction.response.send_message(embed=embed)

@tree.command(name="prodej-veci", description="Prodej vƒõc nebo drogu jin√©mu hr√°ƒçi")
@app_commands.describe(
    cil="Komu chce≈° vƒõc nebo drogu prodat",
    vec="N√°zev vƒõci nebo drogy",
    mnozstvi="Kolik kus≈Ø/gram≈Ø chce≈° prodat",
    cena="Cena za v≈°e v $"
)
@app_commands.autocomplete(vec=autocomplete_veci_drogy)
async def prodej_veci(interaction: discord.Interaction, cil: discord.Member, vec: str, mnozstvi: int, cena: int):
    prodavajici = interaction.user
    if prodavajici.id == cil.id:
        await interaction.response.send_message("‚ùå Nem≈Ø≈æe≈° prod√°vat s√°m sobƒõ.", ephemeral=True)
        return

    data_prodejce = get_or_create_user(prodavajici.id)
    data_kupce = get_or_create_user(cil.id)

    # Invent√°≈ô
    inventar = data_prodejce.get("veci", {}) | data_prodejce.get("drogy", {})
    if vec not in inventar or inventar[vec] < mnozstvi:
        await interaction.response.send_message("‚ùå Nem√°≈° dostatek tohoto p≈ôedmƒõtu nebo drogy.", ephemeral=True)
        return

    embed = discord.Embed(
        title="üí∏ Nab√≠dka k prodeji",
        description=f"{prodavajici.mention} nab√≠z√≠ `{mnozstvi}x {vec}` za `{cena:,}$` {cil.mention}.",
        color=discord.Color.green()
    )

    # Tlaƒç√≠tka
    class Potvrzeni(discord.ui.View):
        def __init__(self, timeout=60):
            super().__init__(timeout=timeout)
            self.prodej_potvrzen = None

        @discord.ui.button(label="‚úÖ P≈ôijmout", style=discord.ButtonStyle.success)
        async def prijmout(self, interaction_button: discord.Interaction, button: discord.ui.Button):
            if interaction_button.user.id != cil.id:
                await interaction_button.response.send_message("‚ùå Tohle nen√≠ tvoje nab√≠dka.", ephemeral=True)
                return
            self.prodej_potvrzen = True
            self.stop()
            await interaction_button.response.defer()

        @discord.ui.button(label="‚ùå Odm√≠tnout", style=discord.ButtonStyle.danger)
        async def odmitnout(self, interaction_button: discord.Interaction, button: discord.ui.Button):
            if interaction_button.user.id != cil.id:
                await interaction_button.response.send_message("‚ùå Tohle nen√≠ tvoje nab√≠dka.", ephemeral=True)
                return
            self.prodej_potvrzen = False
            self.stop()
            await interaction_button.response.defer()

    view = Potvrzeni()
    await interaction.response.send_message(embed=embed, view=view)

    await view.wait()

    if view.prodej_potvrzen is None:
        await interaction.edit_original_response(content="‚è≥ ƒåas na odpovƒõƒè vypr≈°el.", embed=None, view=None)
        return

    if not view.prodej_potvrzen:
        await interaction.edit_original_response(content="‚ùå Kupuj√≠c√≠ odm√≠tl nab√≠dku.", embed=None, view=None)
        return

    total_money_kupce = get_total_money(data_kupce)
    if total_money_kupce < cena:
        await interaction.edit_original_response(content="‚ùå Kupuj√≠c√≠ nem√° dost penƒõz.", embed=None, view=None)
        return

    # Odeber prodejci
    if vec in data_prodejce.get("veci", {}):
        data_prodejce["veci"][vec] -= mnozstvi
        if data_prodejce["veci"][vec] <= 0:
            del data_prodejce["veci"][vec]
        data_kupce.setdefault("veci", {})[vec] = data_kupce["veci"].get(vec, 0) + mnozstvi
    else:
        data_prodejce["drogy"][vec] -= mnozstvi
        if data_prodejce["drogy"][vec] <= 0:
            del data_prodejce["drogy"][vec]
        data_kupce.setdefault("drogy", {})[vec] = data_kupce["drogy"].get(vec, 0) + mnozstvi

    # P≈ôevod penƒõz
    data_prodejce["hotovost"] += cena

    # Remove money from buyer (hotovost first, then bank)
    remaining_to_remove = cena
    if data_kupce["hotovost"] >= remaining_to_remove:
        data_kupce["hotovost"] -= remaining_to_remove
    else:
        remaining_to_remove -= data_kupce["hotovost"]
        data_kupce["hotovost"] = 0
        data_kupce["bank"] -= remaining_to_remove

    # Update total money for both users
    data_prodejce["penize"] = data_prodejce["hotovost"] + data_prodejce["bank"]
    data_kupce["penize"] = data_kupce["hotovost"] + data_kupce["bank"]

    hraci.update_one({"_id": str(prodavajici.id)}, {"$set": data_prodejce})
    hraci.update_one({"_id": str(cil.id)}, {"$set": data_kupce})


    await interaction.edit_original_response(
        content=f"‚úÖ {cil.mention} koupil {mnozstvi}x `{vec}` za {cena:,}$ od {prodavajici.mention}.",
        embed=None,
        view=None
    )
    await log_action(bot, interaction.guild, f"{prodavajici.mention} prodal {mnozstvi}x {vec} hr√°ƒçi {cil.mention} za {cena:,}$")


@tree.command(name="kup-veci", description="Kup si suroviny nebo n√°stroje")
@app_commands.describe(veci="N√°zev vƒõci, kterou chce≈° koupit", pocet="Poƒçet kus≈Ø")
@app_commands.autocomplete(veci=autocomplete_veci)
async def kup_veci(interaction: discord.Interaction, veci: str, pocet: int = 1):
    user = interaction.user
    data = get_or_create_user(user.id)

    if veci not in CENY_VECI:
        await interaction.response.send_message("‚ùå Tato vƒõc nen√≠ dostupn√° k prodeji.", ephemeral=True)
        return

    cena = CENY_VECI[veci] * pocet
    if data["hotovost"] < cena:
        await interaction.response.send_message(f"‚ùå Nem√°≈° dostatek penƒõz (pot≈ôebuje≈° {cena:,}$).", ephemeral=True)
        return

    data["hotovost"] -= cena
    data["penize"] = data["hotovost"] + data["bank"]

    if veci in data["veci"]:
        data["veci"][veci] += pocet
    else:
        data["veci"][veci] = pocet
    hraci.update_one({"_id": str(user.id)}, {"$set": data})


    await interaction.response.send_message(f"‚úÖ Koupil jsi {pocet}x `{veci}` za {cena:,}$.")

    await log_action(bot, interaction.guild, f"{user.mention} koupil {pocet}x {veci} za {cena:,}$")

@tree.command(name="vyrob", description="Vyrob neleg√°ln√≠ l√°tku")
@app_commands.describe(droga="Druh drogy", mnozstvi="Kolik gram≈Ø chce≈° vyrobit")
@app_commands.autocomplete(droga=autocomplete_drogy)
async def vyrob(interaction: discord.Interaction, droga: str, mnozstvi: int = 10):
    uzivatel = interaction.user
    data = get_or_create_user(uzivatel.id)

    if mnozstvi % 10 != 0 or mnozstvi <= 0:
        return await interaction.response.send_message("‚ùå V√Ωroba je mo≈æn√° pouze po 10g d√°vk√°ch (nap≈ô. 10, 20, 30...).", ephemeral=True)

    recept = RECEPTY.get(droga)
    if not recept:
        return await interaction.response.send_message("‚ùå Tato droga neexistuje.", ephemeral=True)

    nyni = datetime.utcnow()
    posledni = data.get("last_vyroba")
    if posledni:
        rozdil = (nyni - datetime.fromisoformat(posledni)).total_seconds()
        if rozdil < VYROBA_COOLDOWN * 60:
            zbyva = int((VYROBA_COOLDOWN * 60 - rozdil) / 60)
            return await interaction.response.send_message(f"‚è≥ Mus√≠≈° poƒçkat {zbyva} minut p≈ôed dal≈°√≠ v√Ωrobou.", ephemeral=True)

    veci = data.get("veci", {})
    drogy = data.get("drogy", {})

    davky = mnozstvi // 10

    # Zkontroluj v≈°echny chybƒõj√≠c√≠ polo≈æky najednou
    chybejici = []
    
    # Zkontroluj suroviny
    for surovina, pocet in recept["suroviny"].items():
        potrebne = pocet * davky
        mam = veci.get(surovina, 0)
        if mam < potrebne:
            chybejici.append(f"üßÇ `{surovina}`: chyb√≠ {potrebne - mam}√ó (m√°≈° {mam}√ó, pot≈ôebuje≈° {potrebne}√ó)")

    # Zkontroluj n√°stroje
    for nastroj, pocet in recept["nastroje"].items():
        mam = veci.get(nastroj, 0)
        if mam < pocet:
            chybejici.append(f"üõ†Ô∏è `{nastroj}`: chyb√≠ {pocet - mam}√ó (m√°≈° {mam}√ó, pot≈ôebuje≈° {pocet}√ó)")
    
    # Pokud nƒõco chyb√≠, zobraz v≈°echno najednou
    if chybejici:
        embed = discord.Embed(
            title=f"‚ùå Chybƒõj√≠c√≠ polo≈æky pro v√Ωrobu {mnozstvi}g `{droga}`",
            description="\n".join(chybejici),
            color=discord.Color.red()
        )
        return await interaction.response.send_message(embed=embed, ephemeral=True)

    # Odeƒçti suroviny
    for surovina, pocet in recept["suroviny"].items():
        veci[surovina] -= pocet * davky
        if veci[surovina] <= 0:
            veci.pop(surovina)

    data["last_vyroba"] = nyni.isoformat()
    celkovy_cas = recept["cas"] * davky


    await interaction.response.send_message(
        f"üß™ Zaƒçal jsi vyr√°bƒõt {mnozstvi}g `{droga}`.\n‚è≥ Dokonƒçen√≠ za {celkovy_cas} minut...", ephemeral=True)
    await log_action(bot, interaction.guild, f"{uzivatel.mention} zaƒçal vyr√°bƒõt {mnozstvi}g {droga}")

    # ASYNC V√ùROBA
    async def dokonci_vyrobu():
        await asyncio.sleep(celkovy_cas * 60)

        # ≈†ance na selh√°n√≠
        if random() < recept["selhani"]:
            for nastroj, pocet in recept["nastroje"].items():
                if nastroj in veci:
                    veci[nastroj] -= pocet
                    if veci[nastroj] <= 0:
                        veci.pop(nastroj)

            try:
                await uzivatel.send(f"‚ùå V√Ωroba {mnozstvi}g `{droga}` selhala. P≈ôi≈°el jsi o suroviny i n√°stroje.")
            except:
                pass
            return

        # V√Ωroba √∫spƒõ≈°n√°
        drogy[droga] = drogy.get(droga, 0) + mnozstvi
        data["drogy"] = drogy
        hraci.update_one({"_id": str(uzivatel.id)}, {"$set": data})

        try:
            await uzivatel.send(f"‚úÖ V√Ωroba dokonƒçena: {mnozstvi}g `{droga}` bylo p≈ôid√°no do invent√°≈ôe.")
        except:
            pass

    asyncio.create_task(dokonci_vyrobu())

async def autocomplete_drogy_ve_inventari(interaction: discord.Interaction, current: str):
    data = get_or_create_user(interaction.user.id)
    drogy = data.get("drogy", {})
    # Filtruj drogy podle aktu√°ln√≠ho textu, vracej max 25 polo≈æek
    options = [
        app_commands.Choice(name=droga, value=droga)
        for droga in drogy.keys()
        if current.lower() in droga.lower()
    ][:25]
    return options

@tree.command(name="pozij-drogu", description="Po≈æij drogu z invent√°≈ôe a z√≠skej doƒçasn√© √∫ƒçinky")
@app_commands.describe(
    droga="Droga, kterou chce≈° pou≈æ√≠t",
    mnozstvi="Kolik chce≈° po≈æ√≠t (nap≈ô. 0.5g, 500mg, all)"
)
@app_commands.autocomplete(droga=autocomplete_drogy_ve_inventari)
async def pozij_drogu(interaction: discord.Interaction, droga: str, mnozstvi: str):
    uzivatel = interaction.user
    data = get_or_create_user(uzivatel.id)
    drogy = data.get("drogy", {})

    if droga not in drogy:
        await interaction.response.send_message("‚ùå Tuto drogu nem√°≈° v invent√°≈ôi.", ephemeral=True)
        return

    inventar_mnozstvi = drogy[droga]  # v gramech

    mnozstvi = mnozstvi.strip().lower()
    try:
        if mnozstvi == "all":
            mnozstvi_g = inventar_mnozstvi
        elif mnozstvi.endswith("mg"):
            mnozstvi_g = float(mnozstvi[:-2].strip()) / 1000
        elif mnozstvi.endswith("g"):
            mnozstvi_g = float(mnozstvi[:-1].strip())
        else:
            mnozstvi_g = float(mnozstvi)  # default = g
    except ValueError:
        await interaction.response.send_message("‚ùå Neplatn√Ω form√°t. Zadej t≈ôeba `0.5g`, `500mg`, nebo `all`.", ephemeral=True)
        return

    if mnozstvi_g <= 0:
        await interaction.response.send_message("‚ùå Mno≈æstv√≠ mus√≠ b√Ωt vƒõt≈°√≠ ne≈æ 0.", ephemeral=True)
        return

    if mnozstvi_g > inventar_mnozstvi:
        await interaction.response.send_message(f"‚ùå M√°≈° pouze {inventar_mnozstvi:.2f}g `{droga}`.", ephemeral=True)
        return
    UCINKY_DROG = {
        "Marihuana": {
            "base": "üßò Uklidnƒõn√≠ a zpomalen√≠ reakc√≠",
            "priznaky": [
                "üëÅÔ∏è‚Äçüó®Ô∏è Zarudl√© oƒçi",
                "üçî Zv√Ω≈°en√° chu≈• k j√≠dlu",
                "üò∂ Zpomalen√° ≈ôeƒç"
            ],
            "trvani": 5
        },
        "Kokain": {
            "base": "‚ö° Zv√Ω≈°en√° energie a euforie",
            "priznaky": [
                "üëÉ ƒåast√© ƒçich√°n√≠",
                "üëÅÔ∏è Roz≈°√≠≈ôen√© zornice",
                "üí¶ Pocen√≠"
            ],
            "trvani": 8
        },
        "Metamfetamin": {
            "base": "üî• Extr√©mn√≠ bdƒõlost a hyperaktivita",
            "priznaky": [
                "üí¢ Paranoia",
                "üëÑ Rychl√© mluven√≠",
                "üí¶ Pocen√≠"
            ],
            "trvani": 10
        },
        "Pervitin": {
            "base": "üåÄ Siln√° euforie a soust≈ôedƒõn√≠",
            "priznaky": [
                "üò¨ Sk≈ô√≠p√°n√≠ zub≈Ø",
                "üíß Sucho v √∫stech",
                "üëÅÔ∏è Roz≈°√≠≈ôen√© zornice"
            ],
            "trvani": 10
        },
        "Ext√°ze": {
            "base": "üíñ Emoƒçn√≠ propojen√≠ a euforie",
            "priznaky": [
                "üëÅÔ∏è Velk√© zornice",
                "üí¶ Pocen√≠",
                "ü§ó P≈ôehnan√° empatie"
            ],
            "trvani": 7
        },
        "Heroin": {
            "base": "üò¥ Uklidnƒõn√≠ a utlumen√≠ bolesti",
            "priznaky": [
                "üòµ Z√∫≈æen√© zornice",
                "üõå Mal√°tnost",
                "ü©∏ Pomalej≈°√≠ d√Ωch√°n√≠"
            ],
            "trvani": 12
        },
    }

    # V√Ωpoƒçet √∫ƒçinku a p≈ô√≠znak≈Ø
    ucinky = UCINKY_DROG.get(droga, None)
    if not ucinky:
        ucinek_text = "‚ùì Nezn√°m√© √∫ƒçinky"
        priznaky = []
        trvani = 5
    else:
        ucinek_text = ucinky["base"]
        priznaky = ucinky["priznaky"]
        trvani = ucinky["trvani"]

    # P≈ô√≠znaky podle s√≠ly d√°vky
    if mnozstvi_g >= 2.5:
        extra = "üö® **Siln√° d√°vka! Mo≈æn√© z√°chvaty, halucinace, nebo smrteln√© riziko.**"
        priznaky += ["üíÄ Dezorientace", "ü§¢ Nevolnost", "üí§ Kolaps"]
    elif mnozstvi_g >= 1.0:
        extra = "‚ö†Ô∏è **Silnƒõj≈°√≠ √∫ƒçinky. V√Ωrazn√© zmƒõny chov√°n√≠.**"
        priznaky += ["üòµ Ztr√°ta rovnov√°hy", "üí¨ Zmateƒçn√Ω projev"]
    else:
        extra = ""

    # Odeƒçten√≠ drogy
    drogy[droga] -= mnozstvi_g
    if drogy[droga] <= 0:
        del drogy[droga]
    data["drogy"] = drogy
    hraci.update_one({"_id": str(uzivatel.id)}, {"$set": data})


    # Embed
    embed = discord.Embed(
        title=f"üíä {droga} pou≈æita",
        description=(
            f"**{interaction.user.display_name}** pr√°vƒõ po≈æil {mnozstvi_g:.2f}g `{droga}`.\n\n"
            f"üß† **√öƒçinek:** {ucinek_text}\n"
            f"‚è≥ **Doba trv√°n√≠:** {trvani * mnozstvi_g:.1f} minut (OOC)\n"
            f"{extra}\n\n"
            f"ü©∫ **P≈ô√≠znaky:**\n" + "\n".join(f"- {p}" for p in priznaky)
        ),
        color=discord.Color.purple()
    )
    await interaction.response.send_message(embed=embed)
    await log_action(bot, interaction.guild, f"{uzivatel.mention} po≈æil {mnozstvi_g:.2f}g {droga}")





@tree.command(name="recepty", description="Zobraz√≠ seznam recept≈Ø pro v√Ωrobu drog")
async def recepty(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üß™ Recepty na v√Ωrobu drog",
        description="Zde je seznam v≈°ech dostupn√Ωch drog, jejich po≈æadavk≈Ø a ≈°anc√≠ na selh√°n√≠.",
        color=discord.Color.dark_red()
    )

    for droga, info in RECEPTY.items():
        suroviny = "\n".join(f"- {nazev} √ó{pocet}" for nazev, pocet in info["suroviny"].items())
        nastroje = "\n".join(f"- {nazev} √ó{pocet}" for nazev, pocet in info["nastroje"].items())
        cas = info["cas"]
        selhani = int(info["selhani"] * 100)

        embed.add_field(
            name=f"üíä {droga}",
            value=(
                f"**üßÇ Suroviny:**\n{suroviny}\n"
                f"**üõ†Ô∏è N√°stroje:**\n{nastroje}\n"
                f"‚è≥ **ƒåas v√Ωroby:** {cas} minut / 10g\n"
                f"‚ö†Ô∏è **≈†ance na selh√°n√≠:** {selhani}%"
            ),
            inline=False
        )

    await interaction.response.send_message(embed=embed)

def is_admin(user: discord.User):
    return any(role.id == ADMIN_ROLE_ID for role in user.roles)

@tree.command(name="pridej-veci", description="P≈ôidej vƒõci do invent√°≈ôe u≈æivatele (admin)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu p≈ôid√°≈° vƒõci", vec="N√°zev vƒõci", mnozstvi="Poƒçet kus≈Ø")
@app_commands.autocomplete(vec=autocomplete_veci)  # Pokud m√°≈° autocomplete vƒõc√≠
async def pridej_veci(interaction: discord.Interaction, uzivatel: discord.Member, vec: str, mnozstvi: int):
    if not is_admin(interaction.user):
        await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return

    data = get_or_create_user(uzivatel.id)
    veci = data.get("veci", {})
    veci[vec] = veci.get(vec, 0) + mnozstvi
    data["veci"] = veci
    hraci.update_one({"_id": str(uzivatel.id)}, {"$set": data})


    await interaction.response.send_message(f"‚úÖ P≈ôid√°no {mnozstvi}√ó `{vec}` u≈æivateli {uzivatel.display_name}.", ephemeral=True)
    await log_action(bot, interaction.guild, f"{interaction.user.mention} p≈ôidal {mnozstvi}√ó {vec} hr√°ƒçi {uzivatel.mention}")


@tree.command(name="pridej-drogy", description="P≈ôid√° drogy do invent√°≈ôe u≈æivatele (admin)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu p≈ôid√°≈° drogy", droga="N√°zev drogy", mnozstvi="Poƒçet gram≈Ø")
@app_commands.autocomplete(droga=autocomplete_drogy)  # Pokud m√°≈° autocomplete drog
async def pridej_drogy(interaction: discord.Interaction, uzivatel: discord.Member, droga: str, mnozstvi: int):
    if not is_admin(interaction.user):
        await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return

    data = get_or_create_user(uzivatel.id)
    drogy = data.get("drogy", {})
    drogy[droga] = drogy.get(droga, 0) + mnozstvi
    data["drogy"] = drogy
    hraci.update_one({"_id": str(uzivatel.id)}, {"$set": data})


    await interaction.response.send_message(f"‚úÖ P≈ôid√°no {mnozstvi}g `{droga}` u≈æivateli {uzivatel.display_name}.", ephemeral=True)
    await log_action(bot, interaction.guild, f"{interaction.user.mention} p≈ôidal {mnozstvi}g {droga} hr√°ƒçi {uzivatel.mention}")

def has_permission(user: discord.User):
    return any(role.id == ADMIN_ROLE_ID for role in user.roles)

# Autocomplete pro odeber-veci podle invent√°≈ôe c√≠lov√©ho u≈æivatele
async def autocomplete_odeber_veci(interaction: discord.Interaction, current: str):
    # Zkus z√≠skat c√≠lov√©ho u≈æivatele z argument≈Ø p≈ô√≠kazu
    uzivatel = None
    for option in interaction.data.get("options", []):
        if option["name"] == "uzivatel":
            try:
                uzivatel = await interaction.guild.fetch_member(option["value"])
            except:
                pass
            break
    if not uzivatel:
        return []

    data = get_or_create_user(uzivatel.id)
    veci = data.get("veci", {})
    # Filtruj podle aktu√°ln√≠ho textu
    return [
        app_commands.Choice(name=vec, value=vec)
        for vec in veci.keys() if current.lower() in vec.lower()
    ][:25]

# Autocomplete pro odeber-drogy podle invent√°≈ôe c√≠lov√©ho u≈æivatele
async def autocomplete_odeber_drogy(interaction: discord.Interaction, current: str):
    uzivatel = None
    for option in interaction.data.get("options", []):
        if option["name"] == "uzivatel":
            try:
                uzivatel = await interaction.guild.fetch_member(option["value"])
            except:
                pass
            break
    if not uzivatel:
        return []

    data = get_or_create_user(uzivatel.id)
    drogy = data.get("drogy", {})
    return [
        app_commands.Choice(name=droga, value=droga)
        for droga in drogy.keys() if current.lower() in droga.lower()
    ][:25]

@tree.command(name="odeber-veci", description="Odeber vƒõci z invent√°≈ôe u≈æivatele (admin/policie)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu odebere≈° vƒõci", vec="N√°zev vƒõci", mnozstvi="Poƒçet kus≈Ø")
@app_commands.autocomplete(vec=autocomplete_odeber_veci)
async def odeber_veci(interaction: discord.Interaction, uzivatel: discord.Member, vec: str, mnozstvi: int):
    if not has_permission(interaction.user):
        await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return

    data = get_or_create_user(uzivatel.id)
    veci = data.get("veci", {})
    if vec not in veci or veci[vec] < mnozstvi:
        await interaction.response.send_message(f"‚ùå U≈æivateli {uzivatel.display_name} chyb√≠ {mnozstvi}√ó `{vec}`.", ephemeral=True)
        return

    veci[vec] -= mnozstvi
    if veci[vec] <= 0:
        del veci[vec]
    data["veci"] = veci
    hraci.update_one({"_id": str(uzivatel.id)}, {"$set": data})


    await interaction.response.send_message(f"‚úÖ Odebr√°no {mnozstvi}√ó `{vec}` u≈æivateli {uzivatel.display_name}.", ephemeral=True)
    await log_action(bot, interaction.guild, f"{interaction.user.mention} odebral {mnozstvi}√ó {vec} hr√°ƒçi {uzivatel.mention}")


@tree.command(name="odeber-drogy", description="Odeber drogy z invent√°≈ôe u≈æivatele (admin/policie)")
@app_commands.describe(uzivatel="U≈æivatel, kter√©mu odebere≈° drogy", droga="N√°zev drogy", mnozstvi="Poƒçet gram≈Ø")
@app_commands.autocomplete(droga=autocomplete_odeber_drogy)
async def odeber_drogy(interaction: discord.Interaction, uzivatel: discord.Member, droga: str, mnozstvi: int):
    if not has_permission(interaction.user):
        await interaction.response.send_message("‚ùå Nem√°≈° opr√°vnƒõn√≠ pou≈æ√≠t tento p≈ô√≠kaz.", ephemeral=True)
        return

    data = get_or_create_user(uzivatel.id)
    drogy = data.get("drogy", {})
    if droga not in drogy or drogy[droga] < mnozstvi:
        await interaction.response.send_message(f"‚ùå U≈æivateli {uzivatel.display_name} chyb√≠ {mnozstvi}g `{droga}`.", ephemeral=True)
        return

    drogy[droga] -= mnozstvi
    if drogy[droga] <= 0:
        del drogy[droga]
    data["drogy"] = drogy
    hraci.update_one({"_id": str(uzivatel.id)}, {"$set": data})


    await interaction.response.send_message(f"‚úÖ Odebr√°no {mnozstvi}g `{droga}` u≈æivateli {uzivatel.display_name}.", ephemeral=True)
    await log_action(bot, interaction.guild, f"{interaction.user.mention} odebral {mnozstvi}g {droga} hr√°ƒçi {uzivatel.mention}")

@tree.command(name="auto-info", description="Zobraz√≠ detailn√≠ informace o autƒõ")
@app_commands.describe(auto="Auto, o kter√©m chce≈° z√≠skat informace")
@app_commands.autocomplete(auto=autocomplete_kup_auto)
async def car_info(interaction: discord.Interaction, auto: str):
    if auto not in AUTA:
        await interaction.response.send_message("‚ùå Takov√© auto neexistuje.", ephemeral=True)
        return

    info = AUTA[auto]
    cena = info.get("cena", 0)
    top_speed = info.get("top_speed", "N/A")
    car_class = info.get("class", "N/A")
    car_type = info.get("type", "N/A")
    fuel = info.get("fuel", "N/A")
    pozadovana_role = info.get("role")

    # Role requirement text
    if pozadovana_role:
        role_text = "üîí Vy≈æaduje specifickou roli (FHP/MPD/FBI/MFD/EMS/FDOT)"
    else:
        role_text = "‚úÖ Dostupn√© pro v≈°echny"

    # Price text
    if cena == 0:
        price_text = "ZDARMA (pro opr√°vnƒõn√© role)"
    else:
        price_text = f"{cena:,} $"

    # Fuel emoji
    fuel_emoji = {
        "Petrol": "‚õΩ",
        "Diesel": "üõ¢Ô∏è",
        "Electric": "üîã",
        "Hybrid": "üîã‚õΩ"
    }.get(fuel, "‚öôÔ∏è")

    embed = discord.Embed(
        title=f"üöó {auto}",
        color=discord.Color.blue()
    )
    embed.add_field(name="üí∞ Cena", value=price_text, inline=True)
    embed.add_field(name="üèÅ Maxim√°ln√≠ rychlost", value=f"{top_speed} mph" if top_speed != "N/A" else "N/A", inline=True)
    embed.add_field(name="üìä T≈ô√≠da", value=car_class, inline=True)
    embed.add_field(name="üöô Typ vozidla", value=car_type, inline=True)
    embed.add_field(name=f"{fuel_emoji} Palivo", value=fuel, inline=True)
    embed.add_field(name="üîê Dostupnost", value=role_text, inline=True)

    await interaction.response.send_message(embed=embed)

@tree.command(name="prikazy", description="Zobraz√≠ seznam v≈°ech dostupn√Ωch p≈ô√≠kaz≈Ø a jejich popis")
async def prikazy(interaction: discord.Interaction):
    embed = discord.Embed(title="üìú Seznam p≈ô√≠kaz≈Ø", color=discord.Color.green())

    embed.add_field(name="/inventory [u≈æivatel]", value="Zobraz√≠ invent√°≈ô hr√°ƒçe (auta, zbranƒõ, vƒõci, drogy).", inline=False)
    embed.add_field(name="/koupit-zbran [zbra≈à] [poƒçet]", value="Koup√≠≈° zbra≈à z nab√≠dky, pokud m√°≈° opr√°vnƒõn√≠ a pen√≠ze.", inline=False)
    embed.add_field(name="/prodej-zbran [u≈æivatel] [zbra≈à] [cena]", value="Prod√°≈° zbra≈à jin√©mu hr√°ƒçi, s potvrzen√≠m od kupuj√≠c√≠ho.", inline=False)
    embed.add_field(name="/koupit-auto [auto]", value="Koup√≠≈° auto z nab√≠dky.", inline=False)
    embed.add_field(name="/prodej-auto [u≈æivatel] [auto] [cena]", value="Prod√°≈° auto jin√©mu hr√°ƒçi, s potvrzen√≠m od kupuj√≠c√≠ho.", inline=False)
    embed.add_field(name="/car-info [auto]", value="Zobraz√≠ detailn√≠ informace o autƒõ (rychlost, t≈ô√≠da, palivo, atd.).", inline=False)
    embed.add_field(name="/kup-veci [vƒõc] [poƒçet]", value="Koup√≠≈° vƒõci pot≈ôebn√© pro v√Ωrobu neleg√°ln√≠ch l√°tek.", inline=False)
    embed.add_field(name="/prodej-veci [u≈æivatel] [vƒõc] [poƒçet] [cena]", value="Prod√°≈° vƒõci jin√©mu hr√°ƒçi za urƒçenou cenu.", inline=False)
    embed.add_field(name="/vyrob [droga] [gramy]", value="Vyrob√≠≈° neleg√°ln√≠ l√°tku (vy≈æaduje n√°stroje a suroviny).", inline=False)
    embed.add_field(name="/vyrob [droga] [gramy]", value="Zaƒçne v√Ωrobu drogy, trv√° urƒçitou dobu, m≈Ø≈æe selhat.", inline=False)
    embed.add_field(name="/pozij-drogu [droga] [gramy]", value="Pou≈æije≈° drogu ze sv√©ho invent√°≈ôe, aktivuj√≠ se efekty.", inline=False)
    embed.add_field(name="/balance", value="Zobraz√≠ stav penƒõ≈æenky a bankovn√≠ho √∫ƒçtu.", inline=False)
    embed.add_field(name="/vyber [ƒç√°stka]", value="Vybere≈° pen√≠ze z banky do penƒõ≈æenky.", inline=False)
    embed.add_field(name="/vloz [ƒç√°stka]", value="Vlo≈æ√≠≈° pen√≠ze z penƒõ≈æenky na bankovn√≠ √∫ƒçet.", inline=False)
    embed.add_field(name="/collect", value="Vybere≈° t√Ωdenn√≠ odmƒõnu podle rol√≠.", inline=False)
    embed.add_field(name="/leaderboard", value="Zobraz√≠ ≈æeb≈ô√≠ƒçek hr√°ƒç≈Ø podle jejich penƒõz.", inline=False)
    embed.add_field(name="/odeber-veci [u≈æivatel] [vƒõc] [poƒçet]", value="Odebere vƒõci z invent√°≈ôe hr√°ƒçe (pouze policie/admin).", inline=False)
    embed.add_field(name="/odeber-drogy [u≈æivatel] [droga] [gramy]", value="Odebere drogy z invent√°≈ôe hr√°ƒçe (pouze policie/admin).", inline=False)
    embed.add_field(name="/reset-inventory [u≈æivatel]", value="Resetuje cel√Ω invent√°≈ô hr√°ƒçe (pouze policie/admin).", inline=False)
    embed.add_field(name="/prikazy", value="Zobraz√≠ tento seznam p≈ô√≠kaz≈Ø.", inline=False)

    await interaction.response.send_message(embed=embed, ephemeral=True)

bot.run(TOKEN)